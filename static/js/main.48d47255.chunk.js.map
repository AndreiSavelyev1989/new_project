{"version":3,"sources":["m3-dal/api.ts","m2-bll/redusers/profile-reducer.ts","m2-bll/redusers/auth-reducer.ts","common/c2-CommonButton/CommonButton.tsx","assets/images/preloader.gif","m1-ui/preloader/Preloader.tsx","assets/images/avatar.png","m1-ui/pages/profile/Profile.tsx","common/c1-CommonInput/CommonInput.tsx","common/c3-CommonCheckbox/CommonCheckbox.tsx","m1-ui/pages/login/Login.tsx","m2-bll/redusers/restore-reducer.ts","m1-ui/pages/new-password/NewPassword.tsx","m2-bll/redusers/registration-reducer.ts","m1-ui/pages/registration/Registration.tsx","m1-ui/pages/restore-password/RestorePassword.tsx","m1-ui/pages/test/Test.tsx","m1-ui/pages/error404/Error404.tsx","m2-bll/redusers/pack-reducer.ts","m1-ui/pages/packs/pack/Pack.tsx","common/c4-Pagination/Pagination.tsx","m1-ui/pages/cards/useComponentVisible.tsx","m1-ui/pages/cards/ModalContainer.tsx","m1-ui/pages/packs/range-slider/RangeSlider.tsx","m1-ui/pages/packs/settings-packs-panel/SettingsPacksPanel.tsx","m1-ui/pages/packs/Packs.tsx","m2-bll/redusers/cards-reducer.ts","m1-ui/pages/cards/Card.tsx","m1-ui/pages/cards/Cards.tsx","m1-ui/pages/learn/Learn.tsx","m1-ui/routes/Routes.tsx","m1-ui/navbar/SidebarData.tsx","m1-ui/navbar/Navbar.tsx","m2-bll/redusers/app-reducer.ts","App.tsx","reportWebVitals.ts","m2-bll/state/store.ts","index.tsx","m1-ui/pages/cards/cards.module.css","m1-ui/navbar/Navbar.module.css","m1-ui/pages/profile/Profile.module.css","assets/style/Common.module.css","common/c4-Pagination/Pagination.module.css","m1-ui/pages/packs/settings-packs-panel/SettingsPacksPanel.module.css","common/c1-CommonInput/CommonInput.module.css","common/c3-CommonCheckbox/CommonCheckbox.module.css","common/c2-CommonButton/CommonButton.module.css","m1-ui/preloader/Preloader.module.css","m1-ui/pages/login/Login.module.css","m1-ui/pages/test/Test.module.css","m1-ui/pages/packs/Packs.module.css"],"names":["instanceHeroku","axios","create","withCredentials","baseURL","cardsPackAPI","getPacks","page","pageCount","sort","userId","packName","min","max","a","get","createPack","cardsPack","post","updatePack","put","deletePack","id","delete","authApi","data","restoreAPI","restorePassword","email","from","message","promise","setNewPassword","password","resetPasswordToken","registrationAPI","cardsAPI","getCards","cardsPackId","addCard","question","answer","card","cardsPack_id","delCard","cardId","updateCard","_id","addPack","initialState","profile","name","avatar","setProfileAC","type","payload","updateMeDataTC","userData","dispatch","setIsFetchingAC","res","updatedUser","error","response","setErrorAC","console","log","isLoggedIn","isFetching","isLogedInAC","value","CommonButton","red","className","restProps","s","btn","Preloader","style","preloaderContainer","src","preloader","alt","Profile","useDispatch","useSelector","state","auth","useState","editMode","setEditMode","userName","setUserName","isShown","setIsShown","useEffect","profileBlock","commonAvatar","nameBlock","showText","hiddenText","editName","onChange","e","currentTarget","autoFocus","onBlur","onKeyPress","key","onDoubleClick","onMouseEnter","onMouseLeave","showName","onClick","to","PATH","LOGIN","CommonInput","formikFieldsProps","label","group","required","highlight","bar","CommonCheckbox","onChangeChecked","spanClassName","children","cbContainer","optionInput","Login","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","commonContainer","title","formBlock","handleSubmit","getFieldProps","touched","registrationError","checkbox","SUCCESS_SUBMIT","FAILED_SUBMIT","INIT","SET_IS_PASSWORD_CHANGED","successSubmit","status","failedSubmit","initRestorePage","currentEmail","isPasswordChanged","NewPassword","useParams","restore","passwordConfirm","token","isRegistered","Registration","registration","then","catch","finally","RestorePassword","submitRestorePassword","useCallback","Test","Error404","pageSize","currentPage","cardPacksTotalCount","portionSize","userPackId","isPrivat","minCardsCount","maxCardsCount","checkedCount","setCurrentPage","removePack","packId","cardPack","setPacksSort","setPackName","setCheckedCount","count","setCardsCount","getState","packs","setPack","cardPacks","totalCardPacksCount","Pack","props","table","tableContainer","tableItem","cardsCount","updated","url","disabled","userAuthId","user_id","onUpdate","cb","CARDS","LEARN","Pagination","pagesCount","Math","ceil","totalItemsCount","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination","navigationButton","filter","p","map","currentButton","paginationButton","onCurrentPage","useComponentVisible","initialIsVisible","isComponentVisible","setIsComponentVisible","ref","useRef","handleHideDropdown","event","handleClickOutside","current","contains","target","document","addEventListener","removeEventListener","ModalContainer","show","closeCB","onShow","useStyles","makeStyles","root","width","RangeSlider","classes","Typography","gutterBottom","Slider","newValue","valueLabelDisplay","aria-labelledby","getAriaValueText","SettingsPacksPanel","settingsPackContainer","onPrivatHandler","setCheck","rangeSlider","input_style","placeholder","onSearchPacksByName","onSendSearchedPackName","Packs","checkedCardsCountArray","isShowModal","setIsShowModal","isShowModalDel","setIsShowModalDel","sortArrowUp","setSortArrowUp","sortArrowDown","setSortArrowDown","searchPackName","setSearchPackName","checkedCardsCount","setCheckedCardsCount","ref2","isComponentVisible2","setIsComponentVisibleDel","getPackIdFromPackComponent","mappedPacks","user_name","updatePackName","formik2","Provider","color","setIsPrivat","pageNumber","sortButton","sortButtonActive","sortButtonInc","sortButtonDec","modal","GET_CARDS","SET_IS_FETCHING","cards","options","cardsTotalCount","getCardsByPackId","GetCards","totalCardsCount","packUserId","Card","grade","questionImg","data-id","dataset","Cards","cardsPackUserId","fieldsWithCards","cardsContainer","paginationContainer","grades","getCard","sum","reduce","acc","rand","random","newSum","Learn","isChecked","setIsChecked","first","setFirst","setCard","g","NEW_PASSWORD","PROFILE","REGISTRATION","RESTORE_PASSWORD","TEST","PACKS","Routes","commonBlock","exact","path","render","sidebarData","icon","Navbar","sidebar","setSidebar","showSidebar","navbar","menuBars","navMenu","active","navMenuItems","navbarToggle","item","index","navText","navbarTitle","isInitialized","initializeApp","App","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","pack","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.48d47255.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { CardPacksType } from '../m2-bll/redusers/pack-reducer';\r\n\r\n// const instance = axios.create({\r\n//     baseURL: \"http://localhost:7542/2.0/\",\r\n//     withCredentials: true\r\n// })\r\n\r\nconst instanceHeroku = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n});\r\n\r\n//Cards Api\r\nexport const cardsPackAPI = {\r\n  getPacks: async (page: number | undefined, pageCount: number | undefined, sort?: string | undefined, userId?: string, packName?: string | undefined, min?: number, max?: number) => {\r\n    return instanceHeroku.get<GetPacksResponseType>(\r\n      `cards/pack?page=${page}&pageCount=${pageCount}&sortPacks=${sort}&user_id=${userId}&packName=${packName}&min=${min}&max=${max}`\r\n    );\r\n  },\r\n  createPack(cardsPack: CardPacksType) {\r\n    return instanceHeroku.post('cards/pack', { cardsPack: { ...cardsPack } });\r\n  },\r\n  updatePack(cardsPack: CardPacksType) {\r\n    return instanceHeroku.put('cards/pack', { cardsPack: { ...cardsPack } });\r\n  },\r\n  deletePack(id: string) {\r\n    return instanceHeroku.delete(`cards/pack?id=${id}`);\r\n  },\r\n};\r\n\r\n//Packs Type\r\nexport type GetPacksResponseType = {\r\n  cardPacks: CardPacksType[];\r\n  page: number;\r\n  pageCount: number;\r\n  cardPacksTotalCount: number;\r\n  minCardsCount: number;\r\n  maxCardsCount: number;\r\n  token: string;\r\n  tokenDeathTime: string;\r\n};\r\n\r\nexport type meDataType = {\r\n  name: string\r\n  avatar: string\r\n  userId: string\r\n}\r\n\r\n//Auth api\r\nexport const authApi = {\r\n  login(data: LoginDataType) {\r\n    return instanceHeroku.post<LoginResponseType>('/auth/login', data);\r\n  },\r\n  me() {\r\n    return instanceHeroku.post('auth/me');\r\n  },\r\n  updateMe(data: meDataType) {\r\n    return instanceHeroku.put('auth/me', data);\r\n  },\r\n  logout() {\r\n    return instanceHeroku.delete('auth/me');\r\n  },\r\n};\r\n\r\nexport const restoreAPI = {\r\n  restorePassword: async (email: string | null) => {\r\n    const promise = await instanceHeroku.post<ResponseRestoreType>(\r\n      'auth/forgot',\r\n      {\r\n        email,\r\n        from: 'dreamonaut@mail.ru',\r\n        message: `<div style=\"background-color: lime; padding: 15px\">\r\n              password recovery link:\r\n              <a href='http://localhost:3000/new_project/#/new-password/$token$'>\r\n              Follow the link to set a new password</a></div>`,\r\n      }\r\n    );\r\n    return promise;\r\n  },\r\n  setNewPassword: async (password: string, resetPasswordToken: string) => {\r\n    const promise = await instanceHeroku.post<ResponseRestoreType>(\r\n      'auth/set-new-password',\r\n      {\r\n        password: password,\r\n        resetPasswordToken: resetPasswordToken,\r\n      }\r\n    );\r\n    return promise;\r\n  },\r\n};\r\nexport const registrationAPI = {\r\n  setRegistration(data: RegistrationParamsType) {\r\n    return instanceHeroku.post<ResponseRegistrationType>('auth/register', data);\r\n  },\r\n};\r\n//Auth Type\r\n// Request types\r\nexport type RegistrationParamsType = {\r\n  email: string;\r\n  password: string;\r\n};\r\nexport type LoginDataType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe?: boolean;\r\n};\r\n\r\n//Response types\r\ntype ResponseRestoreType = {\r\n  info: string;\r\n  error?: string;\r\n};\r\n\r\ntype ResponseLoginRegistrationType = {\r\n  email?: string;\r\n  created?: string;\r\n  isAdmin?: boolean;\r\n  name: string;\r\n  publicCardPacksCount?: number;\r\n  rememberMe?: boolean;\r\n  updated?: string;\r\n  verified?: boolean;\r\n  _id?: string;\r\n};\r\ntype RegistrationType = {\r\n  __v: number;\r\n};\r\ntype LoginType = {\r\n  avatar?: string;\r\n  error?: string;\r\n};\r\n\r\ntype ResponseRegistrationType = ResponseLoginRegistrationType &\r\n  RegistrationType;\r\n\r\nexport type LoginResponseType = ResponseLoginRegistrationType & LoginType;\r\n\r\n//Cards API\r\nexport const cardsAPI = {\r\n  getCards: async (\r\n    cardsPackId: string,\r\n    page: number | undefined,\r\n    pageCount: number | undefined\r\n  ) => {\r\n    return instanceHeroku.get(\r\n      `cards/card?cardsPack_id=${cardsPackId}&page=${page}&pageCount=${pageCount}`\r\n    );\r\n  },\r\n  addCard: async (cardsPackId: string, question: string, answer: string) => {\r\n    return instanceHeroku.post('cards/card', {\r\n      card: {\r\n        cardsPack_id: `${cardsPackId}`,\r\n        question: `${question}`,\r\n        answer: `${answer}`,\r\n      },\r\n    });\r\n  },\r\n  delCard: async (cardId: string) => {\r\n    return instanceHeroku.delete(`cards/card?id=${cardId}`);\r\n  },\r\n  updateCard: async (cardId: string, question?: string, answer?: string) => {\r\n    return instanceHeroku.put('cards/card', {\r\n      card: {\r\n        _id: `${cardId}`,\r\n        question: question,\r\n        answer: answer,\r\n      },\r\n    });\r\n  },\r\n  addPack: async () => {\r\n    return instanceHeroku.post('/cards/pack', {\r\n      cardsPack: {},\r\n    });\r\n  },\r\n};\r\n\r\n// type ResponseCardType = {\r\n//     answer: string;\r\n//     question: string;\r\n//     cardsPack_id: string;\r\n//     grade: number;\r\n//     rating: number;\r\n//     shots: number;\r\n//     type: string;\r\n//     user_id: string;\r\n//     created: string;\r\n//     updated: string;\r\n//     __v: number;\r\n//     _id: string;\r\n// };\r\n//\r\n// type ResponseCardOptionsType = {\r\n//     cardsTotalCount: number;\r\n//     maxGrade: number;\r\n//     minGrade: number;\r\n//     page: number;\r\n//     pageCount: number;\r\n//     packUserId: string;\r\n// }\r\n","import {authApi, LoginResponseType, meDataType} from \"../../m3-dal/api\";\r\nimport {ActionLoginType, setErrorAC, setIsFetchingAC} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../state/store\";\r\n\r\nconst initialState: InitialProfileStateType = {\r\n    profile: {\r\n        name: \"\",\r\n        avatar: \"\",\r\n        _id: \"\"\r\n    }\r\n}\r\n\r\ntype InitialProfileStateType = {\r\n    profile: LoginResponseType\r\n}\r\nexport const profileReducer = (state: InitialProfileStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: {...action.payload}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype  ActionsType = ReturnType<typeof setProfileAC>\r\n\r\n//actions\r\nexport const setProfileAC = (profile: LoginResponseType) => ({type: \"SET_PROFILE\", payload: profile} as const)\r\n\r\n//thunks\r\ntype ThunkAuthType = ThunkAction<void, AppRootStateType, unknown, ActionLoginType>\r\n\r\nexport const updateMeDataTC = (userData: meDataType): ThunkAuthType => async (dispatch) => {\r\n    try {\r\n        dispatch(setIsFetchingAC(true));\r\n        const res = await authApi.updateMe(userData)\r\n        dispatch(setProfileAC(res.data.updatedUser))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setErrorAC(error))\r\n        console.log('Error: ', {...e})\r\n        return console.log(error)\r\n    }\r\n    finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n}","import {authApi, LoginDataType} from \"../../m3-dal/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {setProfileAC} from \"./profile-reducer\";\r\n\r\nexport type initialAuthStateType = {\r\n    isLoggedIn: boolean\r\n    error: string | null\r\n    isFetching: boolean\r\n}\r\nconst initialState: initialAuthStateType = {\r\n    isLoggedIn: false,\r\n    error: null,\r\n    isFetching: false,\r\n}\r\n\r\n//reducers\r\nexport const authReducer = (state = initialState, action: ActionLoginType): initialAuthStateType => {\r\n    switch (action.type) {\r\n        case \"auth/SET-IS-LOGGED-IN\": {\r\n            return {...state, isLoggedIn: action.value}\r\n        }\r\n        case \"auth/ERROR\": {\r\n            return {...state, error: action.error}\r\n        }\r\n        case \"auth/SET-IS-FETCHING\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\n\r\nexport const setErrorAC = (error: string | null) => ({type: \"auth/ERROR\", error} as const)\r\nexport const isLogedInAC = (value: boolean) => ({type: \"auth/SET-IS-LOGGED-IN\", value} as const)\r\nexport const setIsFetchingAC = (isFetching: boolean) => ({type: \"auth/SET-IS-FETCHING\", isFetching} as const)\r\n\r\nexport type ActionLoginType =\r\n    | ReturnType<typeof isLogedInAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setIsFetchingAC>\r\n    | ReturnType<typeof setProfileAC>\r\n\r\ntype ThunkAuthType = ThunkAction<void, AppRootStateType, unknown, ActionLoginType>\r\n//thunk\r\nexport const loginTC = (data: LoginDataType): ThunkAuthType => async (dispatch) => {\r\n    try {\r\n        dispatch(setIsFetchingAC(true));\r\n        const res = await authApi.login(data);\r\n        dispatch(setProfileAC(res.data))\r\n        dispatch(isLogedInAC(true));\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setErrorAC(error));\r\n        console.log('Error: ', {...e});\r\n        return console.log(error);\r\n    } finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n}\r\n\r\nexport const logoutTC = (): ThunkAuthType => async (dispatch) => {\r\n    try {\r\n        dispatch(setIsFetchingAC(true));\r\n        await authApi.logout();\r\n        dispatch(isLogedInAC(false));\r\n    } finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n}\r\n\r\nexport const authMeTC = (): ThunkAuthType => (dispatch) => {\r\n    dispatch(setIsFetchingAC(true));\r\n     return authApi.me()\r\n        .then(res => {\r\n            dispatch(setProfileAC(res.data))\r\n            dispatch(isLogedInAC(true));\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setErrorAC(error));\r\n            console.log('Error: ', {...e});\r\n            dispatch(isLogedInAC(false));\r\n            return console.log(error);\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsFetchingAC(false));\r\n        })\r\n}\r\n// export const authMeTC = (): ThunkAuthType => async (dispatch) => {\r\n//     try {\r\n//         dispatch(setIsFetchingAC(true));\r\n//         const res = await authApi.me();\r\n//         dispatch(setProfileAC(res.data))\r\n//         dispatch(isLogedInAC(true));\r\n//     }\r\n//     catch (e) {\r\n//         const error = e.response\r\n//             ? e.response.data.error\r\n//             : (e.message + ', more details in the console');\r\n//         dispatch(setErrorAC(error));\r\n//         console.log('Error: ', {...e});\r\n//         return console.log(error);\r\n//     }\r\n//     finally {\r\n//         dispatch(setIsFetchingAC(false));\r\n//         dispatch(setIsInitializedApp(true))\r\n//     }\r\n// }\r\n\r\n\r\n\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./CommonButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n    error?: string\r\n    name: string\r\n}\r\n\r\nconst CommonButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        error,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <button\r\n            className={s.btn}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        >{restProps.name}</button>\r\n    );\r\n}\r\n\r\nexport default CommonButton;\r\n","export default __webpack_public_path__ + \"static/media/preloader.fb77d995.gif\";","import React from \"react\";\r\nimport preloader from \"./../../assets/images/preloader.gif\";\r\nimport style from \"./Preloader.module.css\"\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={style.preloaderContainer}>\r\n            <img src={preloader} alt=\"preloader\"/>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/avatar.6afeb838.png\";","import React, {ChangeEvent, useEffect, useState, KeyboardEvent} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../../m2-bll/state/store';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {initialAuthStateType, logoutTC} from '../../../m2-bll/redusers/auth-reducer';\r\nimport CommonButton from '../../../common/c2-CommonButton/CommonButton';\r\nimport style from './Profile.module.css';\r\nimport {Preloader} from \"../../preloader/Preloader\";\r\nimport {updateMeDataTC} from \"../../../m2-bll/redusers/profile-reducer\";\r\nimport commonAvatar from \"./../../../assets/images/avatar.png\"\r\n\r\n\r\nexport const Profile = () => {\r\n    const dispatch = useDispatch();\r\n    const {isLoggedIn, isFetching} = useSelector<AppRootStateType,\r\n        initialAuthStateType>((state) => state.auth);\r\n    const {name, avatar, _id} = useSelector((state: AppRootStateType) => state.profile.profile)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [userName, setUserName] = useState(name)\r\n    const [isShown, setIsShown] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    const logoutCallBack = () => {\r\n        dispatch(logoutTC());\r\n    };\r\n\r\n    const onNameChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setUserName(e.currentTarget.value)\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setUserName(userName);\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        setIsShown(false)\r\n        if (userName && avatar && _id) {\r\n            dispatch(updateMeDataTC({\r\n                avatar: avatar,\r\n                name: userName,\r\n                userId: _id\r\n            }))\r\n        }\r\n    }\r\n\r\n    const onEnterViewMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            setEditMode(false)\r\n            setIsShown(false)\r\n            if (userName && avatar && _id) {\r\n                dispatch(updateMeDataTC({\r\n                    avatar: avatar,\r\n                    name: userName,\r\n                    userId: _id\r\n                }))\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>;\r\n    }\r\n\r\n    return (\r\n        //need to fix - hardcode avatar\r\n        <div className={style.profileBlock}>\r\n            <div>{avatar\r\n                ? <img src={commonAvatar} alt=\"user-avatar\"/>\r\n                : avatar}\r\n            </div>\r\n            <div className={style.nameBlock}>\r\n                <div className={isShown ? style.showText : style.hiddenText}>Double click to change name</div>\r\n                {editMode\r\n                    ? <input type='text'\r\n                             className={style.editName}\r\n                             onChange={onNameChangeHandler}\r\n                             autoFocus\r\n                             onBlur={activateViewMode}\r\n                             onKeyPress={onEnterViewMode}\r\n                             value={userName}/>\r\n                    : <span\r\n                        onDoubleClick={activateEditMode}\r\n                        onMouseEnter={() => setIsShown(true)}\r\n                        onMouseLeave={() => setIsShown(false)}\r\n                        className={style.showName}\r\n                    >{isFetching ? <Preloader/> : name}</span>\r\n                }\r\n            </div>\r\n            <div>\r\n                <CommonButton name={'logout'} onClick={logoutCallBack}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./CommonInput.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    label?: string\r\n    formikFieldsProps?: any\r\n    error?: any\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onBlur?: () => void\r\n    value?: any\r\n};\r\n\r\nconst CommonInput: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        formikFieldsProps,\r\n        label,\r\n        error,\r\n        onChange,\r\n        onBlur,\r\n        value,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <>\r\n            <div className={s.group}>\r\n                <input\r\n                    type={type}\r\n                    {...formikFieldsProps}\r\n                    // onChange={onChange}\r\n                    // onBlur={onBlur}\r\n                    // value={value}\r\n                    // autoFocus\r\n                    required\r\n                />\r\n                <span className={s.highlight}> </span>\r\n                <span className={s.bar}> </span>\r\n                <label>{label}</label>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CommonInput;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./CommonCheckbox.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n    formikFieldsProps?: any\r\n};\r\n\r\nconst CommonCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n        formikFieldsProps,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n\r\n\r\n    return (<div className={s.cbContainer}>\r\n        <label>\r\n            <input className={s.optionInput}\r\n                type={\"checkbox\"}\r\n                {...formikFieldsProps}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            /> Remember me\r\n        </label>\r\n        </div> // благодаря label нажатие на спан передастся в инпут\r\n    );\r\n}\r\n\r\nexport default CommonCheckbox;\r\n","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/state/store\";\r\nimport {initialAuthStateType, loginTC} from \"../../../m2-bll/redusers/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport CommonInput from \"../../../common/c1-CommonInput/CommonInput\";\r\nimport CommonButton from \"../../../common/c2-CommonButton/CommonButton\";\r\nimport style from \"./../../../assets/style/Common.module.css\";\r\nimport CommonCheckbox from \"../../../common/c3-CommonCheckbox/CommonCheckbox\";\r\nimport s from \"./Login.module.css\"\r\nimport {Preloader} from \"../../preloader/Preloader\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch() //разобраться с useDispatch\r\n    const {isFetching, error, isLoggedIn} = useSelector<AppRootStateType, initialAuthStateType>(state => state.auth);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Password must be 15 characters or less';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be 8 characters or more ';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n    return (\r\n        <>\r\n            {isFetching\r\n                ? <Preloader/>\r\n                : <div className={style.commonContainer}>\r\n                    <h1 className={style.title}>Login Here</h1>\r\n                    <div className={style.error}>{error ? error : null}</div>\r\n                    <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n                        <CommonInput\r\n                            type={\"text\"}\r\n                            label={\"Email\"}\r\n                            formikFieldsProps={{...formik.getFieldProps(\"email\")}}/>\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div className={style.registrationError}>{formik.errors.email}</div> : null}\r\n\r\n                        <CommonInput\r\n                            type={\"password\"}\r\n                            label={\"Password\"}\r\n                            formikFieldsProps={{...formik.getFieldProps(\"password\")}}/>\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div className={style.registrationError}>{formik.errors.password}</div> : null}\r\n\r\n                        <div className={s.checkbox}>\r\n                            <CommonCheckbox\r\n                                type={\"checkbox\"}\r\n                                formikFieldsProps={{...formik.getFieldProps(\"rememberMe\")}}/>\r\n                        </div>\r\n\r\n                        <CommonButton type={\"submit\"} name={\"Login\"}/>\r\n                    </form>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}","import {Dispatch} from 'redux';\r\nimport {restoreAPI} from '../../m3-dal/api';\r\nimport {setIsFetchingAC} from \"./auth-reducer\";\r\n\r\nconst SUCCESS_SUBMIT = 'restore/SUCCESS_SUBMIT';\r\nconst FAILED_SUBMIT = 'restore/FAILED_SUBMIT';\r\nconst INIT = 'restore/INIT';\r\nconst SET_IS_PASSWORD_CHANGED = 'restore/SET_IS_PASSWORD_CHANGED';\r\n\r\ntype SuccessSubmitType = {\r\n    type: typeof SUCCESS_SUBMIT;\r\n    status: string;\r\n};\r\n\r\ntype FailedSubmitType = {\r\n    type: typeof FAILED_SUBMIT;\r\n    error: string;\r\n    status: string;\r\n};\r\n\r\ntype InitType = {\r\n    type: typeof INIT;\r\n};\r\n\r\ntype SetIsPasswordChangedType = {\r\n    type: typeof SET_IS_PASSWORD_CHANGED;\r\n    isPasswordChanged: boolean;\r\n};\r\n\r\ntype ActionsType =\r\n    | SuccessSubmitType\r\n    | FailedSubmitType\r\n    | InitType\r\n    | SetIsPasswordChangedType;\r\n\r\nexport type RestoreStateType = {\r\n    currentEmail: null | string;\r\n    error: null | string;\r\n    status: null | string;\r\n    isPasswordChanged: boolean;\r\n};\r\n\r\nexport const successSubmit = (status: string): SuccessSubmitType => ({type: SUCCESS_SUBMIT, status,});\r\nexport const failedSubmit = (error: string, status: string): FailedSubmitType => ({\r\n    type: FAILED_SUBMIT,\r\n    error,\r\n    status,\r\n});\r\nexport const initRestorePage = (): InitType => ({type: INIT,});\r\nexport const setIsPasswordChanged = (isPasswordChanged: boolean): SetIsPasswordChangedType => ({\r\n    type: SET_IS_PASSWORD_CHANGED,\r\n    isPasswordChanged,\r\n});\r\n\r\nconst initialState: RestoreStateType = {\r\n    currentEmail: null,\r\n    error: null,\r\n    status: null,\r\n    isPasswordChanged: false,\r\n};\r\n\r\nexport const restoreReducer = (state: RestoreStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case SUCCESS_SUBMIT: {\r\n            return {...state, currentEmail: null, status: action.status};\r\n        }\r\n        case FAILED_SUBMIT: {\r\n            return {\r\n                ...state,\r\n                currentEmail: null,\r\n                error: action.error,\r\n                status: action.status,\r\n            };\r\n        }\r\n        case INIT: {\r\n            return {...state, status: null, error: null};\r\n        }\r\n        case SET_IS_PASSWORD_CHANGED: {\r\n            return {...state, isPasswordChanged: action.isPasswordChanged};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const restorePassword = (email: string | null) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setIsFetchingAC(true))\r\n        await restoreAPI.restorePassword(email);\r\n        dispatch(setIsFetchingAC(false))\r\n        dispatch(successSubmit('New password send to your email'));\r\n    } catch (e) {\r\n        dispatch(setIsFetchingAC(false))\r\n        dispatch(failedSubmit(e.response.data.error, 'Email not found'));\r\n    }\r\n};\r\n\r\nexport const setNewPassword = (password: string, token: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setIsFetchingAC(true))\r\n        await restoreAPI.setNewPassword(password, token);\r\n        dispatch(setIsFetchingAC(false))\r\n        dispatch(successSubmit('Password has been changed'));\r\n        dispatch(setIsPasswordChanged(true));\r\n    } catch (e) {\r\n        dispatch(setIsFetchingAC(false))\r\n        dispatch(failedSubmit(e.response.data.error, 'Error'));\r\n    }\r\n};\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    RestoreStateType,\r\n    setNewPassword,\r\n    initRestorePage,\r\n} from '../../../m2-bll/redusers/restore-reducer';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../../m2-bll/state/store';\r\nimport {useFormik} from 'formik';\r\nimport CommonButton from '../../../common/c2-CommonButton/CommonButton';\r\nimport CommonInput from '../../../common/c1-CommonInput/CommonInput';\r\nimport style from './../../../assets/style/Common.module.css';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {Preloader} from \"../../preloader/Preloader\";\r\n\r\ntype FormikErrorType = {\r\n    passwordConfirm?: string;\r\n    password?: string;\r\n};\r\n\r\nexport const NewPassword = () => {\r\n    const dispatch = useDispatch();\r\n    const {resetPasswordToken} = useParams<Record<string, string>>();\r\n    const {status, isPasswordChanged} = useSelector<AppRootStateType, RestoreStateType>(state => state.restore);\r\n    const isFetching = useSelector<AppRootStateType, boolean>(state => state.auth.isFetching);\r\n\r\n    useEffect(() => {\r\n        dispatch(initRestorePage());\r\n    }, []);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            passwordConfirm: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Password must be 15 characters or less';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be more than 7 characters ';\r\n            }\r\n\r\n            if (!values.passwordConfirm) {\r\n                errors.passwordConfirm = 'Required';\r\n            } else if (values.password !== values.passwordConfirm) {\r\n                errors.passwordConfirm = 'Password and Confirm Password must be equal';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            if (values.password === values.passwordConfirm) {\r\n                dispatch(setNewPassword(values.password, resetPasswordToken));\r\n            }\r\n        },\r\n    });\r\n\r\n    if (isPasswordChanged) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n        <div className={style.commonContainer}>\r\n            <h1 className={style.title}>Set new password</h1>\r\n            <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n                <div className={style.error}>{status && status}</div>\r\n                <CommonInput\r\n                    type={'password'}\r\n                    label={'Password'}\r\n                    formikFieldsProps={{...formik.getFieldProps('password')}}\r\n                />\r\n\r\n                {formik.touched.password && formik.errors.password ? (\r\n                    <div className={style.registrationError}>\r\n                        {formik.errors.password}\r\n                    </div>\r\n                ) : null}\r\n\r\n                <CommonInput\r\n                    type={'password'}\r\n                    label={'Confirm Password'}\r\n                    formikFieldsProps={{...formik.getFieldProps('passwordConfirm')}}\r\n                />\r\n\r\n                {formik.touched.passwordConfirm && formik.errors.passwordConfirm ? (\r\n                    <div className={style.registrationError}>\r\n                        {formik.errors.passwordConfirm}\r\n                    </div>\r\n                ) : null}\r\n                {isFetching ? <Preloader/> : <CommonButton type={'submit'} name={'Send'}/>}\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n","import {Dispatch} from \"redux\";\r\nimport {registrationAPI, RegistrationParamsType} from \"../../m3-dal/api\";\r\nimport {setIsFetchingAC} from \"./auth-reducer\";\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n    error: null\r\n}\r\n\r\nexport type InitialStateType = {\r\n    isRegistered: boolean\r\n    error: null | string\r\n}\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"registration/SET-REGISTRATION\":\r\n            return {...state, isRegistered: action.value}\r\n        case \"registration/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nconst setIsRegisteredAC = (value: boolean) => ({type: \"registration/SET-REGISTRATION\", value} as const)\r\nconst setErrorAC = (error: string | null) => ({type: \"registration/SET-ERROR\", error} as const)\r\n//thunks\r\nexport const registrationTC = (data: RegistrationParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setIsFetchingAC(true))\r\n    registrationAPI.setRegistration(data)\r\n        .then(res => {\r\n            dispatch(setIsRegisteredAC(true))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            console.log('Error: ', {...e})\r\n            dispatch(setErrorAC(error))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsFetchingAC(false))\r\n        })\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsRegisteredAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setIsFetchingAC>\r\n","import React from \"react\";\r\nimport style from \"./../../../assets/style/Common.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {InitialStateType, registrationTC} from \"../../../m2-bll/redusers/registration-reducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../routes/Routes\";\r\nimport {useFormik} from \"formik\";\r\nimport CommonButton from \"../../../common/c2-CommonButton/CommonButton\";\r\nimport CommonInput from \"../../../common/c1-CommonInput/CommonInput\";\r\nimport {Preloader} from \"../../preloader/Preloader\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    passwordConfirm?: string\r\n}\r\n\r\nexport const Registration = () => {\r\n    const {isRegistered, error} = useSelector<AppRootStateType, InitialStateType>(state => state.registration)\r\n    const isFetching = useSelector<AppRootStateType, boolean>(state => state.auth.isFetching)\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            passwordConfirm: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Password must be 15 characters or less';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be more than 7 characters ';\r\n            }\r\n\r\n            if (!values.passwordConfirm) {\r\n                errors.passwordConfirm = 'Required';\r\n            } else if (values.password !== values.passwordConfirm) {\r\n                errors.passwordConfirm = 'Password and Confirm Password must be equal'\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            if (values.password === values.passwordConfirm) {\r\n                dispatch(registrationTC(values))\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.commonContainer}>\r\n            <h1 className={style.title}>Registration</h1>\r\n            <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n                <div className={style.error}>{error ? error : null}</div>\r\n\r\n                <CommonInput\r\n                    type={\"text\"}\r\n                    label={\"Email\"}\r\n                    error={error || (formik.errors && formik.touched)}\r\n                    formikFieldsProps={{...formik.getFieldProps(\"email\")}}/>\r\n\r\n                {formik.touched.email && formik.errors.email ?\r\n                    <div className={style.registrationError}>{formik.errors.email}</div> : null}\r\n\r\n                <CommonInput\r\n                    type={\"password\"}\r\n                    label={\"Password\"}\r\n                    formikFieldsProps={{...formik.getFieldProps(\"password\")}}/>\r\n\r\n                {formik.touched.password && formik.errors.password ?\r\n                    <div className={style.registrationError}>{formik.errors.password}</div> : null}\r\n\r\n                    <CommonInput\r\n                        type={\"password\"}\r\n                        label={\"Confirm Password\"}\r\n                        formikFieldsProps={{...formik.getFieldProps(\"passwordConfirm\")}}\r\n                    />\r\n\r\n                {formik.touched.passwordConfirm && formik.errors.passwordConfirm ?\r\n                    <div className={style.registrationError}>{formik.errors.passwordConfirm}</div> : null}\r\n\r\n                {isFetching ? <Preloader/> : <CommonButton type={\"submit\"} name={\"Sign up\"}/>}\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport {\r\n    initRestorePage,\r\n    restorePassword,\r\n    RestoreStateType,\r\n} from '../../../m2-bll/redusers/restore-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../m2-bll/state/store';\r\nimport {useFormik} from 'formik';\r\nimport CommonButton from '../../../common/c2-CommonButton/CommonButton';\r\nimport CommonInput from '../../../common/c1-CommonInput/CommonInput';\r\nimport style from './../../../assets/style/Common.module.css';\r\nimport {Preloader} from '../../preloader/Preloader';\r\n\r\ntype FormikErrorType = {\r\n    email?: string;\r\n};\r\n\r\nexport const RestorePassword = () => {\r\n    const dispatch = useDispatch();\r\n    const {currentEmail, status} = useSelector<AppRootStateType,\r\n        RestoreStateType>((state) => state.restore);\r\n    const isFetching = useSelector<AppRootStateType, boolean>(\r\n        (state) => state.auth.isFetching\r\n    );\r\n\r\n    const submitRestorePassword = useCallback(\r\n        (currentEmail) => {\r\n            dispatch(restorePassword(currentEmail));\r\n        },\r\n        [currentEmail]\r\n    );\r\n\r\n    useEffect(() => {\r\n        dispatch(initRestorePage());\r\n    }, []);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (\r\n                /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)/.test(\r\n                    values.email\r\n                )\r\n            ) {\r\n                return undefined;\r\n            } else {\r\n                errors.email = 'Write correct email';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            submitRestorePassword(values.email);\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div className={style.commonContainer}>\r\n            <h1 className={style.title}>Restore</h1>\r\n            <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n                <div className={style.error}>{status && status}</div>\r\n                <CommonInput\r\n                    type={'text'}\r\n                    label={'Email'}\r\n                    formikFieldsProps={{...formik.getFieldProps('email')}}\r\n                />\r\n\r\n                {formik.touched.email && formik.errors.email ? (\r\n                    <div className={style.registrationError}>{formik.errors.email}</div>\r\n                ) : null}\r\n                {isFetching ? (\r\n                    <Preloader/>\r\n                ) : (\r\n                    <CommonButton type={'submit'} name={'Send request'}/>\r\n                )}\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport CommonButton from \"../../../common/c2-CommonButton/CommonButton\";\r\nimport CommonInput from \"../../../common/c1-CommonInput/CommonInput\";\r\nimport CommonCheckbox from \"../../../common/c3-CommonCheckbox/CommonCheckbox\";\r\nimport style from \"./Test.module.css\"\r\n\r\nexport const Test = () => {\r\n    return (\r\n        <div className={style.test}>\r\n            <CommonButton name={'test'}/>\r\n            <CommonInput label={'Test'}/>\r\n            <CommonCheckbox/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\n\nexport const Error404 = () => {\n    return (\n        <div>\n            Error404\n        </div>\n    )\n}","import {cardsPackAPI} from \"../../m3-dal/api\";\r\nimport {ActionLoginType, setErrorAC, setIsFetchingAC} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../state/store\";\r\n\r\nexport type CardsPackInitialStateType = {\r\n    cardsPack: CardPacksType[]\r\n    pageSize: number\r\n    currentPage: number\r\n    cardPacksTotalCount: number\r\n    portionSize: number\r\n    userPackId: string\r\n    sort: undefined | string\r\n    isPrivat: boolean\r\n    packName: string | undefined\r\n    minCardsCount: number\r\n    maxCardsCount: number\r\n    checkedCount: number[] | number\r\n}\r\n\r\nconst initialState: CardsPackInitialStateType = {\r\n    cardsPack: [] as CardPacksType[],\r\n    pageSize: 6,\r\n    currentPage: 1,\r\n    cardPacksTotalCount: 0,\r\n    portionSize: 10,\r\n    userPackId: '',\r\n    sort: '',\r\n    isPrivat: false,\r\n    packName: '',\r\n    minCardsCount: 0,\r\n    maxCardsCount: 50,\r\n    checkedCount: [0, 50]\r\n}\r\n\r\n//types\r\n\r\nexport type CardPacksType = {\r\n    _id?: string\r\n    user_id?: string\r\n    user_name?: string\r\n    private?: boolean\r\n    name: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    cardsCount?: number | undefined\r\n    type?: string\r\n    rating?: number\r\n    created?: string | undefined\r\n    updated?: string\r\n    more_id?: string\r\n    __v?: number\r\n}\r\n\r\n//actions\r\nexport const setCardsPacksAC = (setPack: CardPacksType[]) => ({type: 'pack/SET-PACKS', setPack} as const)\r\nexport const setTotalCardPacksCount = (totalCardPacksCount: number) => ({\r\n    type: \"pack/SET_TOTAL_CARD_PACKS_COUNT\",\r\n    totalCardPacksCount\r\n} as const)\r\nexport const setCurrentPage = (page: number) => ({type: \"pack/SET_CURRENT_PAGE\", page} as const)\r\nexport const removePack = (packId: string) => ({type: \"pack/REMOVE_PACK\", packId} as const)\r\nexport const addPack = (cardPack: CardPacksType) => ({type: \"pack/ADD_PACK\", cardPack} as const)\r\nexport const setPacksSort = (sort: string | undefined) => ({type: \"pack/SET_PACKS_SORT\", sort} as const)\r\nexport const setIsPrivat = (isPrivat: boolean) => ({type: \"pack/SET_IS_PRIVAT\", isPrivat} as const)\r\nexport const setPackName = (packName: string | undefined) => ({type: \"pack/SET_PACK_NAME\", packName} as const)\r\nexport const setCheckedCount = (count: Array<number> | number) => ({type: \"pack/SET_COUNT_RANGE\", payload: count} as const)\r\nexport const setCardsCount = (min: number, max: number) => ({type: \"pack/SET_CARDS_COUNT\", min, max} as const)\r\n\r\ntype ActionPacksType =\r\n    | ActionLoginType\r\n    | ReturnType<typeof setCardsPacksAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setTotalCardPacksCount>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof removePack>\r\n    | ReturnType<typeof addPack>\r\n    | ReturnType<typeof setPacksSort>\r\n    | ReturnType<typeof setIsPrivat>\r\n    | ReturnType<typeof setPackName>\r\n    | ReturnType<typeof setCheckedCount>\r\n    | ReturnType<typeof setCardsCount>\r\n\r\ntype ThunkPacksType = ThunkAction<void, AppRootStateType, unknown, ActionPacksType>\r\n\r\n//reducer\r\nexport const cardPackReducer = (state: CardsPackInitialStateType = initialState, action: ActionPacksType): CardsPackInitialStateType => {\r\n    switch (action.type) {\r\n        case \"pack/SET-PACKS\":\r\n            return {...state, cardsPack: action.setPack}\r\n\r\n        case \"pack/SET_TOTAL_CARD_PACKS_COUNT\":\r\n            return {\r\n                ...state, cardPacksTotalCount: action.totalCardPacksCount\r\n            }\r\n        case \"pack/SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state, currentPage: action.page\r\n            }\r\n        case \"pack/REMOVE_PACK\":\r\n            return {\r\n                ...state,\r\n                cardsPack: state.cardsPack.filter(pack => pack._id !== action.packId)\r\n            }\r\n        case \"pack/ADD_PACK\":\r\n            return {\r\n                ...state,\r\n                cardsPack: [action.cardPack, ...state.cardsPack]\r\n            }\r\n        case \"pack/SET_PACKS_SORT\":\r\n            return {\r\n                ...state,\r\n                sort: action.sort\r\n            }\r\n        case \"pack/SET_IS_PRIVAT\":\r\n            return {\r\n                ...state,\r\n                isPrivat: action.isPrivat\r\n            }\r\n        case \"pack/SET_PACK_NAME\":\r\n            return {\r\n                ...state,\r\n                packName: action.packName\r\n            }\r\n        case \"pack/SET_COUNT_RANGE\":\r\n            return {\r\n                ...state,\r\n                checkedCount: action.payload\r\n            }\r\n        case \"pack/SET_CARDS_COUNT\":\r\n            return {\r\n                ...state,\r\n                minCardsCount: action.min,\r\n                maxCardsCount: action.max\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//thunks\r\nexport const getPacks = (page: number | undefined, pageCount: number | undefined, userId?: string): ThunkPacksType => async (dispatch, getState) => {\r\n    const sort = getState().packs.sort\r\n    const packName = getState().packs.packName\r\n    // @ts-ignore\r\n    const min = getState().packs.checkedCount[0]\r\n    // @ts-ignore\r\n    const max = getState().packs.checkedCount[1]\r\n\r\n    dispatch(setIsFetchingAC(true));\r\n    try {\r\n        const res = await cardsPackAPI.getPacks(page, pageCount, sort, userId, packName, min, max)\r\n        dispatch(setCardsPacksAC(res.data.cardPacks))\r\n        dispatch(setTotalCardPacksCount(res.data.cardPacksTotalCount))\r\n        dispatch(setCardsCount(res.data.minCardsCount, res.data.maxCardsCount))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setErrorAC(error))\r\n        console.log('Error: ', {...e})\r\n        return console.log(error)\r\n    } finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n};\r\n\r\n\r\nexport const createNewPack = (cardPack: CardPacksType): ThunkPacksType => async (dispatch, getState) => {\r\n    const page = getState().packs.currentPage\r\n    const pageCount = getState().packs.pageSize\r\n    const isPrivat = getState().packs.isPrivat\r\n    const userId = getState().profile.profile._id\r\n\r\n    try {\r\n        dispatch(setIsFetchingAC(true));\r\n        await cardsPackAPI.createPack(cardPack)\r\n        dispatch(addPack(cardPack))\r\n        if (isPrivat) {\r\n            dispatch(getPacks(page, pageCount, userId))\r\n        } else {\r\n            dispatch(getPacks(page, pageCount, \"\"))\r\n        }\r\n        // dispatch(setCurrentPage(1))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        console.log('Error: ', {...e})\r\n        dispatch(setErrorAC(error))\r\n        return console.log(error)\r\n    } finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n}\r\n\r\nexport const deleteCardPack = (id: string): ThunkPacksType => async (dispatch, getState) => {\r\n    const page = getState().packs.currentPage\r\n    const pageCount = getState().packs.pageSize\r\n    const isPrivat = getState().packs.isPrivat\r\n    const userId = getState().profile.profile._id\r\n\r\n    dispatch(setIsFetchingAC(true))\r\n    try {\r\n        await cardsPackAPI.deletePack(id)\r\n        dispatch(removePack(id))\r\n        if (isPrivat) {\r\n            dispatch(getPacks(page, pageCount, userId))\r\n        } else {\r\n            dispatch(getPacks(page, pageCount, \"\"))\r\n        }\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        console.log('Error: ', {...e})\r\n        dispatch(setErrorAC(error))\r\n        return console.log(error)\r\n    } finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n}\r\n\r\nexport const updateCardPack = (cardPack: CardPacksType): ThunkPacksType => async (dispatch, getState) => {\r\n    const page = getState().packs.currentPage\r\n    const pageCount = getState().packs.pageSize\r\n    const isPrivat = getState().packs.isPrivat\r\n    const userId = getState().profile.profile._id\r\n    try {\r\n        dispatch(setIsFetchingAC(true));\r\n        await cardsPackAPI.updatePack(cardPack)\r\n        if (isPrivat) {\r\n            dispatch(getPacks(page, pageCount, userId))\r\n        } else {\r\n            dispatch(getPacks(page, pageCount, \"\"))\r\n        }\r\n        dispatch(setCurrentPage(1))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        console.log('Error: ', {...e})\r\n        dispatch(setErrorAC(error))\r\n        return console.log(error)\r\n    } finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from '../Packs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { PATH } from '../../../routes/Routes';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteCardPack } from '../../../../m2-bll/redusers/pack-reducer';\r\n\r\ntype PropsType = {\r\n  name: string;\r\n  cardsCount: number | undefined;\r\n  updated: string | undefined;\r\n  url: string | undefined;\r\n  id: string | undefined;\r\n  userAuthId: string | undefined;\r\n  user_id: string | undefined;\r\n  onUpdate: () => void;\r\n  cb: (id: string | undefined) => void;\r\n};\r\n\r\nexport const Pack: React.FC<PropsType> = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteCardPackHandler = () => {\r\n      if (props.id) {\r\n          dispatch(deleteCardPack(props.id));\r\n      }\r\n  }\r\n  const onClickUpdateHandler = () => {\r\n    props.onUpdate();\r\n    props.cb(props.id);\r\n  };\r\n\r\n  return (\r\n    <div className={s.table}>\r\n      <div className={s.tableContainer}>\r\n        <div className={s.tableItem}>{props.name}</div>\r\n        <div className={s.tableItem}>{props.cardsCount}</div>\r\n        <div className={s.tableItem}>{props.updated}</div>\r\n        <div className={s.tableItem}>{props.url}</div>\r\n        <div className={s.tableItem}>\r\n          <button\r\n            onClick={onDeleteCardPackHandler}\r\n            disabled={props.userAuthId !== props.user_id}\r\n          >\r\n            del\r\n          </button>\r\n          <button\r\n            onClick={onClickUpdateHandler}\r\n            disabled={props.userAuthId !== props.user_id}\r\n          >\r\n            update\r\n          </button>\r\n        </div>\r\n        <div className={s.tableItem}>\r\n          <NavLink to={PATH.CARDS + '/' + props.id}>Cards</NavLink>\r\n          <NavLink to={PATH.LEARN + '/' + props.id}>Learn</NavLink>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, {useState} from \"react\";\r\nimport style from \"./Pagination.module.css\";\r\n\r\ntype PaginationPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onCurrentPage: (pageNumber: any) => void\r\n    portionSize: number\r\n    isFetching: boolean\r\n}\r\n\r\nexport const Pagination = (props: PaginationPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize)\r\n\r\n    let pages: number[] = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / props.portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    const leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * props.portionSize\r\n\r\n    return (\r\n        <div className={style.pagination}>\r\n            {portionNumber > 1 && <button\r\n                onClick={() => setPortionNumber(portionNumber - 1)}\r\n                disabled={props.isFetching}\r\n                className={style.navigationButton}\r\n            >Prev</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(p => <button\r\n                    key={p}\r\n                    className={props.currentPage === p\r\n                        ? style.currentButton\r\n                        : style.paginationButton\r\n                    }\r\n                    onClick={() => props.onCurrentPage(p)}\r\n                    disabled={props.isFetching}\r\n                >{p} </button>)}\r\n            {portionCount > portionNumber && <button\r\n                onClick={() => setPortionNumber(portionNumber + 1)}\r\n                disabled={props.isFetching}\r\n                className={style.navigationButton}\r\n            >Next</button>}\r\n        </div>\r\n    )\r\n}","import { useState, useEffect, useRef } from 'react';\r\n\r\nexport default function useComponentVisible(initialIsVisible: boolean) {\r\n  const [isComponentVisible, setIsComponentVisible] = useState(\r\n    initialIsVisible\r\n  );\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  const handleHideDropdown = (event: KeyboardEvent) => {\r\n    if (event.key === 'Escape') {\r\n      setIsComponentVisible(false);\r\n    }\r\n  };\r\n\r\n  const handleClickOutside = (event: Event) => {\r\n    if (ref.current && !ref.current.contains(event.target as Node)) {\r\n      setIsComponentVisible(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', handleHideDropdown, true);\r\n    document.addEventListener('click', handleClickOutside, true);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleHideDropdown, true);\r\n      document.removeEventListener('click', handleClickOutside, true);\r\n    };\r\n  });\r\n\r\n  return { ref, isComponentVisible, setIsComponentVisible };\r\n}\r\n","import React, { ReactChild } from 'react';\r\nimport s from './cards.module.css';\r\n\r\ntype PropsType = {\r\n  show: boolean;\r\n  closeCB: () => void;\r\n  children?: Array<ReactChild> | ReactChild;\r\n  onShow?: () => void;\r\n};\r\n\r\nconst ModalContainer = ({ show, closeCB, children, onShow }: PropsType) => {\r\n  return (\r\n    <>\r\n      {show && (\r\n        <>\r\n          <button className={s.btn} onClick={closeCB}>X</button>\r\n          {children}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModalContainer;\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/state/store\";\r\nimport {CardsPackInitialStateType, setCheckedCount} from \"../../../../m2-bll/redusers/pack-reducer\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 300\r\n    },\r\n});\r\n\r\nexport const RangeSlider = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useDispatch()\r\n    const {minCardsCount, maxCardsCount} = useSelector<AppRootStateType, CardsPackInitialStateType>(state=> state.packs)\r\n    const value = useSelector<AppRootStateType, number[] | number>(state => state.packs.checkedCount)\r\n\r\n    const valuetext = (value: number) => {\r\n        return `${value}`;\r\n    }\r\n\r\n    const handleChange = (event: any, newValue: number[] | number) => {\r\n        dispatch(setCheckedCount(newValue));\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography id=\"range-slider\" gutterBottom>\r\n                Count packs\r\n            </Typography>\r\n            <Slider\r\n                value={value}\r\n                onChange={handleChange}\r\n                valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"range-slider\"\r\n                getAriaValueText={valuetext}\r\n                min={minCardsCount}\r\n                max={maxCardsCount}\r\n            />\r\n        </div>\r\n    );\r\n}","import style from \"./SettingsPacksPanel.module.css\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {RangeSlider} from \"../range-slider/RangeSlider\";\r\n\r\ntype PropsType = {\r\n    value: string\r\n    onPrivatHandler: () => void\r\n    onSearchPacksByName: (name: string) => void\r\n    onSendSearchedPackName: () => void\r\n}\r\n\r\nexport const SettingsPacksPanel: React.FC<PropsType> = (props) => {\r\n\r\n    const onChangePrivatHandler = () => {\r\n        props.onPrivatHandler()\r\n    }\r\n\r\n    const onPackNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onSearchPacksByName(e.currentTarget.value)\r\n    }\r\n\r\n    const onSendPackNameHandler = () => {\r\n        props.onSendSearchedPackName()\r\n    }\r\n\r\n    return (\r\n        <div className={style.settingsPackContainer}>\r\n            <div>\r\n                <input type={\"checkbox\"} onClick={onChangePrivatHandler}/><span className={style.setCheck}>My packs</span>\r\n            </div>\r\n            <div className={style.rangeSlider}>\r\n                <RangeSlider />\r\n            </div>\r\n            <div className={style.input_style}>\r\n                Search:\r\n                <input placeholder={'Pack name'} onChange={onPackNameHandler} value={props.value}/>\r\n            </div>\r\n            <button onClick={onSendPackNameHandler}>Search</button>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport s from './Packs.module.css';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    CardPacksType,\r\n    CardsPackInitialStateType,\r\n    createNewPack,\r\n    getPacks, setCheckedCount,\r\n    setCurrentPage,\r\n    setIsPrivat, setPackName,\r\n    setPacksSort,\r\n    updateCardPack,\r\n} from '../../../m2-bll/redusers/pack-reducer';\r\nimport {AppRootStateType} from '../../../m2-bll/state/store';\r\nimport {Pack} from './pack/Pack';\r\nimport {Preloader} from '../../preloader/Preloader';\r\nimport {Pagination} from '../../../common/c4-Pagination/Pagination';\r\nimport {initialAuthStateType} from '../../../m2-bll/redusers/auth-reducer';\r\nimport useComponentVisible from '../cards/useComponentVisible';\r\nimport ModalContainer from '../cards/ModalContainer';\r\nimport {useFormik} from 'formik';\r\nimport style from './../../../assets/style/Common.module.css';\r\nimport CommonInput from '../../../common/c1-CommonInput/CommonInput';\r\nimport CommonButton from '../../../common/c2-CommonButton/CommonButton';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PATH} from \"../../routes/Routes\";\r\nimport {AiOutlineArrowDown, AiOutlineArrowUp} from \"react-icons/all\";\r\nimport {IconContext} from \"react-icons\";\r\nimport {SettingsPacksPanel} from \"./settings-packs-panel/SettingsPacksPanel\";\r\n\r\ntype FormikErrorType = {\r\n    packName?: string;\r\n};\r\n\r\ntype Formik2ErrorType = {\r\n    updatePackName?: string;\r\n};\r\n\r\nlet packId: string | undefined = '';\r\n\r\nexport const Packs = () => {\r\n    const dispatch = useDispatch();\r\n    const packs = useSelector<AppRootStateType, Array<CardPacksType>>(\r\n        (state) => state.packs.cardsPack\r\n    );\r\n    const {\r\n        cardPacksTotalCount,\r\n        portionSize,\r\n        currentPage,\r\n        pageSize,\r\n        sort,\r\n        isPrivat,\r\n        packName,\r\n        minCardsCount,\r\n        maxCardsCount\r\n    } = useSelector<AppRootStateType, CardsPackInitialStateType>(\r\n        (state) => state.packs\r\n    );\r\n    const {isFetching, isLoggedIn} = useSelector<AppRootStateType, initialAuthStateType>(\r\n        (state) => state.auth\r\n    );\r\n    const userAuthId = useSelector<AppRootStateType, string | undefined>(\r\n        (state) => state.profile.profile._id\r\n    );\r\n    const checkedCardsCountArray = useSelector<AppRootStateType, number[] | number>(state => state.packs.checkedCount)\r\n    // @ts-ignore\r\n    let min = checkedCardsCountArray[0]\r\n    // @ts-ignore\r\n    let max = checkedCardsCountArray[1]\r\n    const [isShowModal, setIsShowModal] = useState<boolean>(false);\r\n    const [isShowModalDel, setIsShowModalDel] = useState<boolean>(false);\r\n    const [sortArrowUp, setSortArrowUp] = useState(false)\r\n    const [sortArrowDown, setSortArrowDown] = useState(false)\r\n    const [searchPackName, setSearchPackName] = useState(\"\")\r\n    const [checkedCardsCount, setCheckedCardsCount] = useState<number[] | number>(checkedCardsCountArray)\r\n\r\n    const {\r\n        ref,\r\n        isComponentVisible,\r\n        setIsComponentVisible,\r\n    } = useComponentVisible(false);\r\n\r\n    const {\r\n        ref: ref2,\r\n        isComponentVisible: isComponentVisible2,\r\n        setIsComponentVisible: setIsComponentVisibleDel,\r\n    } = useComponentVisible(false);\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        if (isPrivat) {\r\n            dispatch(getPacks(currentPage, pageSize, userAuthId))\r\n        } else {\r\n            dispatch(getPacks(currentPage, pageSize, \"\"));\r\n        }\r\n    }, [isLoggedIn, sort, isPrivat, currentPage, packName, checkedCardsCount]);\r\n\r\n    const getPackIdFromPackComponent = (id: string | undefined) => {\r\n        packId = id;\r\n    };\r\n\r\n    const onUpdate = () => {\r\n        setIsShowModalDel(true);\r\n        setIsComponentVisibleDel(true);\r\n    };\r\n    const onCurrentPage = (pageNumber: any) => {\r\n        dispatch(setCurrentPage(pageNumber));\r\n    };\r\n    const onSortUp = () => {\r\n        dispatch(setPacksSort(\"0cardsCount\"))\r\n        setSortArrowUp(true)\r\n        setSortArrowDown(false)\r\n    }\r\n    const onSortDown = () => {\r\n        dispatch(setPacksSort(\"1cardsCount\"))\r\n        setSortArrowDown(true)\r\n        setSortArrowUp(false)\r\n    }\r\n\r\n    const onPrivatHandler = () => {\r\n        dispatch(setIsPrivat(!isPrivat))\r\n        dispatch(setPacksSort(\"\"))\r\n        dispatch(setCurrentPage(1))\r\n        dispatch(setPackName(\"\"))\r\n        dispatch(setCheckedCount([minCardsCount, maxCardsCount]))\r\n        setSearchPackName(\"\")\r\n        setSortArrowDown(false)\r\n        setSortArrowUp(false)\r\n    }\r\n\r\n    const onSearchPacksByName = (name: string) => {\r\n        setSearchPackName(name)\r\n    }\r\n\r\n    const onSendSearchedPackName = () => {\r\n        dispatch(setPackName(searchPackName))\r\n        setCheckedCardsCount([min, max])\r\n    }\r\n\r\n    const hideModal = () => {\r\n        setIsShowModal(false);\r\n    };\r\n    const hideModalDel = () => {\r\n        setIsShowModalDel(false);\r\n    };\r\n    const mappedPacks = packs.map((p) => {\r\n        return (\r\n            <Pack\r\n                key={p._id}\r\n                name={p.name}\r\n                cardsCount={p.cardsCount}\r\n                updated={p.updated}\r\n                url={p.user_name}\r\n                id={p._id}\r\n                user_id={p.user_id}\r\n                userAuthId={userAuthId}\r\n                onUpdate={onUpdate}\r\n                cb={getPackIdFromPackComponent}\r\n            />\r\n        );\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            packName: '',\r\n            updatePackName: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.packName) {\r\n                errors.packName = 'Required';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            dispatch(createNewPack({name: values.packName}));\r\n            values.packName = '';\r\n            setIsShowModal(false);\r\n        },\r\n    });\r\n    const formik2 = useFormik({\r\n        initialValues: {\r\n            updatePackName: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: Formik2ErrorType = {};\r\n\r\n            if (!values.updatePackName) {\r\n                errors.updatePackName = 'Required';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values, e) => {\r\n            dispatch(updateCardPack({_id: packId, name: values.updatePackName}));\r\n            values.updatePackName = '';\r\n            setIsShowModalDel(false);\r\n        },\r\n    });\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <IconContext.Provider value={{color: '#283eae'}}>\r\n                <div className={s.table}>\r\n                    <h1 className={s.title}>Packs</h1>\r\n                    <SettingsPacksPanel\r\n                        value={searchPackName}\r\n                        onPrivatHandler={onPrivatHandler}\r\n                        onSearchPacksByName={onSearchPacksByName}\r\n                        onSendSearchedPackName={onSendSearchedPackName}/>\r\n                    <Pagination\r\n                        totalItemsCount={cardPacksTotalCount}\r\n                        pageSize={pageSize}\r\n                        currentPage={currentPage}\r\n                        onCurrentPage={onCurrentPage}\r\n                        portionSize={portionSize}\r\n                        isFetching={isFetching}\r\n                    />\r\n                    <div className={s.tableContainer}>\r\n                        <div className={s.tableItem}>Pack name</div>\r\n                        <div className={s.tableItem}>\r\n                            <div>Cards count</div>\r\n\r\n                            <div className={s.sortButton}>\r\n                                <button className={sortArrowUp ? s.sortButtonActive : s.sortButtonInc}\r\n                                        onClick={onSortUp}>\r\n                                    <AiOutlineArrowUp/></button>\r\n                                <button className={sortArrowDown ? s.sortButtonActive : s.sortButtonDec}\r\n                                        onClick={onSortDown}><AiOutlineArrowDown/></button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.tableItem}>Updated</div>\r\n                        <div className={s.tableItem}>Url</div>\r\n                        <div className={s.tableItem}>\r\n                            <button\r\n                                onClick={() => {\r\n                                    setIsShowModal(true);\r\n                                    setIsComponentVisible(true);\r\n                                }}\r\n                            >\r\n                                add\r\n                            </button>\r\n                        </div>\r\n                        <div className={s.tableItem}>Go to link</div>\r\n                    </div>\r\n                    {isFetching ? <Preloader/> : mappedPacks}\r\n                </div>\r\n\r\n                <div className={s.modal} ref={ref}>\r\n                    {isComponentVisible && (\r\n                        <ModalContainer show={isShowModal} closeCB={hideModal}>\r\n                            <div className={style.commonContainer}>\r\n                                <h2 className={style.title}>Add Pack</h2>\r\n                                <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n                                    <CommonInput\r\n                                        type={'text'}\r\n                                        label={'Pack Name'}\r\n                                        formikFieldsProps={{...formik.getFieldProps('packName')}}\r\n                                    />\r\n\r\n                                    {formik.touched.packName && formik.errors.packName ? (\r\n                                        <div className={style.registrationError}>\r\n                                            {formik.errors.packName}\r\n                                        </div>\r\n                                    ) : null}\r\n                                    <CommonButton type={'submit'} name={'Add pack'}/>\r\n                                </form>\r\n                            </div>\r\n                        </ModalContainer>\r\n                    )}\r\n                </div>\r\n\r\n                <div className={s.modal} ref={ref2}>\r\n                    {isComponentVisible2 && (\r\n                        <ModalContainer show={isShowModalDel} closeCB={hideModalDel}>\r\n                            <div className={style.commonContainer}>\r\n                                <h2 className={style.title}>Update Pack</h2>\r\n                                <form className={style.formBlock} onSubmit={formik2.handleSubmit}>\r\n                                    <CommonInput\r\n                                        type={'text'}\r\n                                        label={'Pack Name'}\r\n                                        formikFieldsProps={{\r\n                                            ...formik2.getFieldProps('updatePackName'),\r\n                                        }}\r\n                                    />\r\n\r\n                                    {formik2.touched.updatePackName &&\r\n                                    formik2.errors.updatePackName ? (\r\n                                        <div className={style.registrationError}>\r\n                                            {formik2.errors.updatePackName}\r\n                                        </div>\r\n                                    ) : null}\r\n                                    <CommonButton type={'submit'} name={'Update pack'}/>\r\n                                </form>\r\n                            </div>\r\n                        </ModalContainer>\r\n                    )}\r\n                </div>\r\n            </IconContext.Provider>\r\n        </>\r\n    );\r\n};\r\n","import { ThunkAction } from 'redux-thunk';\r\nimport { cardsAPI } from '../../m3-dal/api';\r\nimport { AppRootStateType } from '../state/store';\r\n\r\nconst GET_CARDS = 'cards/GET-CARDS';\r\nconst SET_IS_FETCHING = 'cards/SET-IS-FETCHING';\r\n\r\ntype GetCardsType = {\r\n  type: typeof GET_CARDS;\r\n  packId: string;\r\n  cards: Array<CardsType>;\r\n};\r\n\r\nexport type CardsType = {\r\n  answer: string;\r\n  answerImg?: string;\r\n  answerVideo?: string;\r\n  cardsPack_id: string;\r\n  comments?: string;\r\n  created: string;\r\n  grade: number;\r\n  more_id: string;\r\n  question: string;\r\n  questionImg?: string;\r\n  questionVideo?: string;\r\n  rating: number;\r\n  shots: number;\r\n  type: string;\r\n  updated: string;\r\n  user_id?: string;\r\n  __v?: number;\r\n  _id: string;\r\n};\r\n\r\ntype ActionsType =\r\n  | ReturnType<typeof GetCards>\r\n  | ReturnType<typeof setIsFetchingCardsAC>\r\n  | ReturnType<typeof setTotalCardsCount>\r\n  | ReturnType<typeof setCurrentPage>\r\n  | ReturnType<typeof setUserId>;\r\n\r\nexport type StateCardsType = {\r\n  cards: Array<CardsType>;\r\n  options: {};\r\n  isFetching: boolean;\r\n  cardsTotalCount: number;\r\n  pageSize: number;\r\n  currentPage: number;\r\n  portionSize: number;\r\n  userId: string;\r\n};\r\n\r\ntype ThunkCardType = ThunkAction<void, AppRootStateType, unknown, ActionsType>;\r\n\r\nexport const setIsFetchingCardsAC = () =>\r\n  ({ type: 'cards/SET-IS-FETCHING' } as const);\r\nexport const setTotalCardsCount = (totalCardsCount: number) =>\r\n  ({\r\n    type: 'SET_TOTAL_CARDS_COUNT',\r\n    totalCardsCount,\r\n  } as const);\r\nexport const setCurrentPage = (page: number) =>\r\n  ({ type: 'SET_CURRENT_PAGE', page } as const);\r\nexport const setUserId = (userId: string) =>\r\n  ({ type: 'SET_USER_ID', userId } as const);\r\n\r\nexport const GetCards = (\r\n  packId: string,\r\n  cards: Array<CardsType>\r\n): GetCardsType =>\r\n  ({\r\n    type: GET_CARDS,\r\n    packId,\r\n    cards,\r\n  } as const);\r\n\r\nconst initialState = {\r\n  cards: [],\r\n  options: {},\r\n  isFetching: false,\r\n  cardsTotalCount: 0,\r\n  pageSize: 5,\r\n  currentPage: 1,\r\n  portionSize: 4,\r\n  userId: '',\r\n};\r\n\r\nexport const cardsReducer = (\r\n  state: StateCardsType = initialState,\r\n  action: ActionsType\r\n) => {\r\n  switch (action.type) {\r\n    case GET_CARDS: {\r\n      return { ...state, cards: [...action.cards] };\r\n    }\r\n    case SET_IS_FETCHING: {\r\n      return { ...state, isFetching: !state.isFetching };\r\n    }\r\n    case 'SET_TOTAL_CARDS_COUNT':\r\n      return {\r\n        ...state,\r\n        cardsTotalCount: action.totalCardsCount,\r\n      };\r\n    case 'SET_CURRENT_PAGE':\r\n      return {\r\n        ...state,\r\n        currentPage: action.page,\r\n      };\r\n    case 'SET_USER_ID':\r\n      return {\r\n        ...state,\r\n        userId: action.userId,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const getCardsByPackId = (\r\n  cardsPackId: string,\r\n  page?: number | undefined,\r\n  pageCount?: number | undefined\r\n): ThunkCardType => (dispatch) => {\r\n  try {\r\n    dispatch(setIsFetchingCardsAC());\r\n    cardsAPI.getCards(cardsPackId, page, pageCount).then((res) => {\r\n      console.log(res);\r\n      dispatch(GetCards(cardsPackId, res.data.cards));\r\n      dispatch(setTotalCardsCount(res.data.cardsTotalCount));\r\n      dispatch(setUserId(res.data.packUserId));\r\n      dispatch(setIsFetchingCardsAC());\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport const delCard = (\r\n  cardId: string,\r\n  cardsPackId: string,\r\n  page?: number,\r\n  pageCount?: number\r\n): ThunkCardType => (dispatch) => {\r\n  try {\r\n    cardsAPI.delCard(cardId).then(() => {\r\n      dispatch(getCardsByPackId(cardsPackId, page, pageCount));\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport const addCard = (\r\n  cardsPackId: string,\r\n  question: string,\r\n  answer: string,\r\n  page?: number,\r\n  pageCount?: number\r\n): ThunkCardType => (dispatch) => {\r\n  try {\r\n    cardsAPI.addCard(cardsPackId, question, answer).then(() => {\r\n      dispatch(getCardsByPackId(cardsPackId, page, pageCount));\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport const updateCard = (\r\n  cardId: string,\r\n  cardsPackId: string,\r\n  answer?: string,\r\n  question?: string,\r\n  page?: number,\r\n  pageCount?: number\r\n): ThunkCardType => (dispatch) => {\r\n  try {\r\n    cardsAPI.updateCard(cardId, question, answer).then(() => {\r\n      dispatch(getCardsByPackId(cardsPackId, page, pageCount));\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n","import s from './cards.module.css';\r\nimport style from './../../../assets/style/Common.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { delCard, updateCard } from '../../../m2-bll/redusers/cards-reducer';\r\nimport { PATH } from '../../routes/Routes';\r\nimport { NavLink } from 'react-router-dom';\r\nimport React, { useState } from 'react';\r\nimport useComponentVisible from './useComponentVisible';\r\nimport CommonInput from '../../../common/c1-CommonInput/CommonInput';\r\nimport CommonButton from '../../../common/c2-CommonButton/CommonButton';\r\nimport ModalContainer from './ModalContainer';\r\nimport { useFormik } from 'formik';\r\nimport { AppRootStateType } from '../../../m2-bll/state/store';\r\n\r\n\r\ntype PropsType = {\r\n  id: string;\r\n  question?: string;\r\n  answer: string;\r\n  updated?: string;\r\n  questionImg?: string;\r\n  cardsPackId: string;\r\n  grade?: number;\r\n  userId: string | undefined;\r\n  userAuthId: string | undefined\r\n};\r\n\r\nexport const Card: React.FC<PropsType> = ({\r\n  id,\r\n  question,\r\n  answer,\r\n  grade,\r\n  updated,\r\n  questionImg,\r\n  cardsPackId,\r\n  userId, userAuthId\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [isShowModal, setIsShowModal] = useState<boolean>(false);\r\n  const hideModal = () => {\r\n    setIsShowModal(false);\r\n  };\r\n\r\n  const {\r\n    ref,\r\n    isComponentVisible,\r\n    setIsComponentVisible,\r\n  } = useComponentVisible(true);\r\n  const delCardClick = (e: React.SyntheticEvent<HTMLButtonElement>) => {\r\n    const cardId = e.currentTarget.dataset.id;\r\n    if (cardId) {\r\n      dispatch(delCard(cardId, cardsPackId));\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      question: '',\r\n      answer: '',\r\n    },\r\n\r\n    onSubmit: (values, e) => {\r\n      dispatch(updateCard(id, cardsPackId, values.question, values.answer));\r\n      values.question = '';\r\n      values.answer = '';\r\n      setIsShowModal(false);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <tr key={id}>\r\n        <td className={s['table__cell']}>{question}</td>\r\n        <td className={s['table__cell']}>{answer}</td>\r\n        <td className={s['table__cell']}>{grade}</td>\r\n        <td className={s['table__cell']}>{updated}</td>\r\n        <td className={s['table__cell']}>{questionImg}</td>\r\n        <td className={s['table__cell']}>\r\n          <button data-id={id} onClick={delCardClick} disabled={userId !== userAuthId}>\r\n            Del\r\n          </button>\r\n        </td>\r\n        <td className={s['table__cell']}>\r\n          <button\r\n            onClick={() => {\r\n              setIsShowModal(true);\r\n              setIsComponentVisible(true);\r\n            }}\r\n            disabled={userId !== userAuthId}\r\n          >\r\n            Update\r\n          </button>\r\n        </td>\r\n      </tr>\r\n      <div className={s.modal} ref={ref}>\r\n        {isComponentVisible && (\r\n          <ModalContainer show={isShowModal} closeCB={hideModal}>\r\n            <div className={style.commonContainer}>\r\n              <h2 className={style.title}>Update Card</h2>\r\n              <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n                <CommonInput\r\n                  type={'text'}\r\n                  label={'question'}\r\n                  formikFieldsProps={{ ...formik.getFieldProps('question') }}\r\n                />\r\n                <CommonInput\r\n                  type={'text'}\r\n                  label={'answer'}\r\n                  formikFieldsProps={{ ...formik.getFieldProps('answer') }}\r\n                />\r\n                <CommonButton type={'submit'} name={'Update Card'} />\r\n              </form>\r\n            </div>\r\n          </ModalContainer>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n  addCard,\r\n  CardsType,\r\n  getCardsByPackId,\r\n  setCurrentPage,\r\n  StateCardsType,\r\n} from '../../../m2-bll/redusers/cards-reducer';\r\nimport { AppRootStateType } from '../../../m2-bll/state/store';\r\nimport { Preloader } from '../../preloader/Preloader';\r\nimport { Card } from './Card';\r\nimport s from './cards.module.css';\r\nimport style from './../../../assets/style/Common.module.css';\r\nimport ModalContainer from './ModalContainer';\r\nimport { useFormik } from 'formik';\r\nimport CommonButton from '../../../common/c2-CommonButton/CommonButton';\r\nimport CommonInput from '../../../common/c1-CommonInput/CommonInput';\r\nimport useComponentVisible from './useComponentVisible';\r\nimport { Pagination } from '../../../common/c4-Pagination/Pagination';\r\n\r\ntype FormikErrorType = {\r\n  question?: string;\r\n  answer?: string;\r\n};\r\n\r\nexport const Cards = () => {\r\n  const {\r\n    cards,\r\n    isFetching,\r\n    cardsTotalCount,\r\n    currentPage,\r\n    pageSize,\r\n    portionSize,\r\n  } = useSelector<AppRootStateType, StateCardsType>((state) => state.cards);\r\n  const [isShowModal, setIsShowModal] = useState<boolean>(false);\r\n  const dispatch = useDispatch();\r\n  const { cardsPackId } = useParams<Record<string, string>>();\r\n  useEffect(() => {\r\n    dispatch(getCardsByPackId(cardsPackId, currentPage, pageSize));\r\n  }, [dispatch, cardsPackId]);\r\n\r\n  const hideModal = () => {\r\n    setIsShowModal(false);\r\n  };\r\n  const userAuthId = useSelector<AppRootStateType, string | undefined>(\r\n    (state) => state.profile.profile._id\r\n  );\r\n  const cardsPackUserId = useSelector<AppRootStateType, string>(\r\n    (state) => state.cards.userId\r\n  );\r\n\r\n  const fieldsWithCards = cards.map((card: CardsType) => {\r\n    return (\r\n      <Card\r\n        key={card._id}\r\n        id={card._id}\r\n        userId={card.user_id}\r\n        question={card.question}\r\n        answer={card.answer}\r\n        grade={card.grade}\r\n        updated={card.updated}\r\n        cardsPackId={cardsPackId}\r\n        questionImg={card.questionImg}\r\n        userAuthId={userAuthId}\r\n      />\r\n    );\r\n  });\r\n\r\n  const onCurrentPage = (pageNumber: any) => {\r\n    dispatch(setCurrentPage(pageNumber));\r\n    dispatch(getCardsByPackId(cardsPackId, currentPage, pageSize));\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      question: '',\r\n      answer: '',\r\n    },\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {};\r\n\r\n      if (!values.question) {\r\n        errors.question = 'Required';\r\n      }\r\n      if (!values.answer) {\r\n        errors.answer = 'Required';\r\n      }\r\n      return errors;\r\n    },\r\n\r\n    onSubmit: (values) => {\r\n      dispatch(addCard(cardsPackId, values.question, values.answer));\r\n      values.question = '';\r\n      values.answer = '';\r\n      setIsShowModal(false);\r\n    },\r\n  });\r\n\r\n  const {\r\n    ref,\r\n    isComponentVisible,\r\n    setIsComponentVisible,\r\n  } = useComponentVisible(true);\r\n\r\n  return (\r\n    <>\r\n      <div className={s.cardsContainer}>\r\n        <div className={s.paginationContainer}>\r\n          <Pagination\r\n            totalItemsCount={cardsTotalCount}\r\n            pageSize={pageSize}\r\n            currentPage={currentPage}\r\n            onCurrentPage={onCurrentPage}\r\n            portionSize={portionSize}\r\n            isFetching={isFetching}\r\n          />\r\n        </div>\r\n        {isFetching ? (\r\n          <Preloader />\r\n        ) : (\r\n          <table className={s['table']}>\r\n            <thead>\r\n              <tr className={s['table__row']}>\r\n                <td className={s['table__cell']}>question</td>\r\n                <td className={s['table__cell']}>answer</td>\r\n                <td className={s['table__cell']}>Grade</td>\r\n                <td className={s['table__cell']}>updated</td>\r\n                <td className={s['table__cell']}>url</td>\r\n                <td className={s['table__cell']}>\r\n                  <button\r\n                    onClick={() => {\r\n                      setIsShowModal(true);\r\n                      setIsComponentVisible(true);\r\n                    }}\r\n                    disabled={cardsPackUserId !== userAuthId}\r\n                  >\r\n                    Add\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{fieldsWithCards}</tbody>\r\n          </table>\r\n        )}\r\n        <div className={s.modal} ref={ref}>\r\n          {isComponentVisible && (\r\n            <ModalContainer show={isShowModal} closeCB={hideModal}>\r\n              <div className={style.commonContainer}>\r\n                <h2 className={style.title}>Add Card</h2>\r\n                <form\r\n                  className={style.formBlock}\r\n                  onSubmit={formik.handleSubmit}\r\n                >\r\n                  <CommonInput\r\n                    type={'text'}\r\n                    label={'question'}\r\n                    formikFieldsProps={{ ...formik.getFieldProps('question') }}\r\n                  />\r\n\r\n                  {formik.touched.question && formik.errors.question ? (\r\n                    <div className={style.registrationError}>\r\n                      {formik.errors.question}\r\n                    </div>\r\n                  ) : null}\r\n                  <CommonInput\r\n                    type={'text'}\r\n                    label={'answer'}\r\n                    formikFieldsProps={{ ...formik.getFieldProps('answer') }}\r\n                  />\r\n                  {formik.touched.answer && formik.errors.answer ? (\r\n                    <div className={style.registrationError}>\r\n                      {formik.errors.answer}\r\n                    </div>\r\n                  ) : null}\r\n                  <CommonButton type={'submit'} name={'Add card'} />\r\n                </form>\r\n              </div>\r\n            </ModalContainer>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {CardsType, getCardsByPackId} from \"../../../m2-bll/redusers/cards-reducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/state/store\";\r\n\r\nconst grades = ['не знал', 'забыл', 'долго думал', 'перепутал', 'знал'];\r\n\r\nconst getCard = (cards: CardsType[]) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    console.log('test: ', sum, rand, res)\r\n\r\n    return cards[res.id + 1];\r\n}\r\n\r\nexport const Learn = () => {\r\n    const [isChecked, setIsChecked] = useState<boolean>(false);\r\n    const [first, setFirst] = useState<boolean>(true);\r\n    // const [first, setFirst] = useState<boolean>(0);\r\n    const cards = useSelector<AppRootStateType, Array<CardsType>>(state => state.cards.cards);\r\n    const {cardsPackId} = useParams<{ cardsPackId: string }>()\r\n    const [card, setCard] = useState<CardsType>();\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        console.log('LearnContainer useEffect');\r\n\r\n        if (first) {\r\n            debugger\r\n            dispatch(getCardsByPackId(cardsPackId));\r\n            setFirst(false);\r\n        }\r\n\r\n        console.log('cards', cards)\r\n        if (cards.length > 0) setCard(getCard(cards));\r\n\r\n        return () => {\r\n            console.log('LearnContainer useEffect off');\r\n        }\r\n    }, [dispatch, cardsPackId, cards, first]);\r\n\r\n    const onNext = () => {\r\n        setIsChecked(false);\r\n\r\n        if (cards.length > 0) {\r\n            // dispatch\r\n            setCard(getCard(cards));\r\n        } else {\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            LearnPage\r\n\r\n            <div>{card && card.question}</div>\r\n            <div>\r\n                <button onClick={() => setIsChecked(true)}>check</button>\r\n            </div>\r\n\r\n            {isChecked && (\r\n                <>\r\n                    <div>{card && card.answer}</div>\r\n\r\n                    {grades.map((g, i) => (\r\n                        <button key={'grade-' + i} onClick={() => {\r\n                        }}>{g}</button>\r\n                    ))}\r\n\r\n                    <div>\r\n                        <button onClick={onNext}>next</button>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Profile} from \"../pages/profile/Profile\";\r\nimport {Login} from \"../pages/login/Login\";\r\nimport {NewPassword} from \"../pages/new-password/NewPassword\";\r\nimport {Registration} from \"../pages/registration/Registration\";\r\nimport {RestorePassword} from \"../pages/restore-password/RestorePassword\";\r\nimport {Test} from \"../pages/test/Test\";\r\nimport {Error404} from \"../pages/error404/Error404\";\r\nimport style from \"../../assets/style/Common.module.css\"\r\nimport {Packs} from \"../pages/packs/Packs\";\r\nimport {Cards} from '../pages/cards/Cards';\r\nimport {Learn} from \"../pages/learn/Learn\";\r\n\r\nexport const PATH = {\r\n    LOGIN: \"/login\",\r\n    NEW_PASSWORD: \"/new-password\",\r\n    PROFILE: \"/profile\",\r\n    REGISTRATION: \"/registration\",\r\n    RESTORE_PASSWORD: \"/restore-password\",\r\n    TEST: \"/test\",\r\n    PACKS: \"/packs\",\r\n    CARDS: \"/cards\",\r\n    LEARN: \"/learn\"\r\n}\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div className={style.commonBlock}>\r\n        <>\r\n            <Switch>\r\n                <Route exact path={\"/\"} render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={`${PATH.NEW_PASSWORD}/:resetPasswordToken`} render={() => <NewPassword/>}/>\r\n                <Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\r\n                <Route path={PATH.RESTORE_PASSWORD} render={() => <RestorePassword/>}/>\r\n                <Route path={PATH.TEST} render={() => <Test/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n                <Route path={`${PATH.CARDS}/:cardsPackId`} render={() => <Cards/>}/>\r\n                <Route path={`${PATH.LEARN}/:cardsPackId`} render={() => <Learn/>}/>\r\n                <Route render={() => <Error404/>}/>\r\n            </Switch>\r\n        </>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {FaRegRegistered, GiCardPick, ImProfile, RiLockPasswordFill, RiLoginBoxLine} from \"react-icons/all\";\r\nimport {PATH} from \"../routes/Routes\";\r\n\r\nexport const sidebarData = [\r\n    {\r\n        title: \"Profile\",\r\n        path: PATH.PROFILE,\r\n        icon: <ImProfile/>\r\n    },\r\n    {\r\n        title: \"Registration\",\r\n        path: PATH.REGISTRATION,\r\n        icon: <FaRegRegistered/>\r\n    },\r\n    {\r\n        title: \"Restore password\",\r\n        path: PATH.RESTORE_PASSWORD,\r\n        icon: <RiLockPasswordFill/>\r\n    },\r\n    {\r\n        title: \"Login\",\r\n        path: PATH.LOGIN,\r\n        icon: <RiLoginBoxLine/>\r\n    },\r\n    {\r\n        title: \"Packs\",\r\n        path: PATH.PACKS,\r\n        icon: <GiCardPick/>\r\n    },\r\n\r\n]","import React, {useState} from \"react\";\r\nimport {Link, NavLink} from \"react-router-dom\";\r\nimport style from \"./Navbar.module.css\";\r\nimport {VscChromeClose, VscThreeBars} from \"react-icons/all\";\r\nimport {sidebarData} from \"./SidebarData\";\r\nimport {IconContext} from \"react-icons\";\r\n\r\nexport const Navbar = () => {\r\n\r\n    const [sidebar, setSidebar] = useState(false)\r\n    const showSidebar = () => setSidebar(!sidebar)\r\n\r\n    return (\r\n        <>\r\n            <IconContext.Provider value={{color: '#3aa251'}}>\r\n                <div className={style.navbar}>\r\n                    <NavLink to={'#'} className={style.menuBars}>\r\n                        <VscThreeBars onClick={showSidebar}/>\r\n                    </NavLink>\r\n                </div>\r\n                <nav className={sidebar ? `${style.navMenu} ${style.active}` : style.navMenu}>\r\n                    <ul className={style.navMenuItems} onClick={showSidebar}>\r\n                        <li className={style.navbarToggle}>\r\n                            <IconContext.Provider value={{color: 'red'}}>\r\n                                <NavLink to={\"#\"} className={style.menuBars}>\r\n                                    <VscChromeClose/>\r\n                                </NavLink>\r\n                            </IconContext.Provider>\r\n                        </li>\r\n                        {sidebarData.map((item, index) => {\r\n                            return (\r\n                                <li key={index} className={style.navText}>\r\n                                    <Link to={item.path}>\r\n                                        {item.icon}\r\n                                        <span className={style.navbarTitle}>{item.title}</span>\r\n                                    </Link>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </nav>\r\n            </IconContext.Provider>\r\n        </>\r\n    )\r\n}","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {authMeTC} from \"./auth-reducer\";\r\n\r\nexport type AppStateType = {\r\n    isInitialized: boolean\r\n\r\n}\r\n\r\nconst initialState: AppStateType = {\r\n    isInitialized: false,\r\n}\r\n\r\n//actions\r\nexport type ActionsAppType = ReturnType<typeof initializedSuccess>\r\n\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionsAppType) => {\r\n    switch (action.type) {\r\n        case \"app/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = (isInitialized: boolean) => ({\r\n    type: \"app/INITIALIZED_SUCCESS\",\r\n    isInitialized\r\n} as const)\r\n\r\n\r\n//thunks\r\ntype ThunkAuthType = ThunkAction<void, AppRootStateType, unknown, ActionsAppType>\r\nexport const initializeApp = (): ThunkAuthType => (dispatch) => {\r\n    let promise = dispatch(authMeTC())\r\n// @ts-ignore\r\n    promise.then(() => {\r\n        dispatch(initializedSuccess(true))\r\n    })\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {Navbar} from './m1-ui/navbar/Navbar';\r\nimport {Routes} from './m1-ui/routes/Routes';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./m2-bll/state/store\";\r\nimport {initializeApp} from \"./m2-bll/redusers/app-reducer\";\r\nimport {Preloader} from \"./m1-ui/preloader/Preloader\";\r\n\r\nexport const App = () => {\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp())\r\n    }, [])\r\n\r\n    if(!isInitialized){\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navbar/>\r\n            <Routes/>\r\n        </>\r\n    );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {profileReducer} from \"../redusers/profile-reducer\";\r\nimport {registrationReducer} from \"../redusers/registration-reducer\";\r\nimport {authReducer} from \"../redusers/auth-reducer\";\r\nimport { restoreReducer } from '../redusers/restore-reducer';\r\nimport {cardPackReducer} from \"../redusers/pack-reducer\";\r\nimport { cardsReducer } from '../redusers/cards-reducer';\r\nimport {appReducer} from \"../redusers/app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    profile: profileReducer,\r\n    registration: registrationReducer,\r\n    auth: authReducer,\r\n    restore: restoreReducer,\r\n    packs: cardPackReducer,\r\n    cards: cardsReducer\r\n})\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./m2-bll/state/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <HashRouter>\n          <Provider store={store}>\n              <App />\n          </Provider>\n      </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsContainer\":\"cards_cardsContainer__dcRZM\",\"table\":\"cards_table__3kjop\",\"table__cell\":\"cards_table__cell__1Nh1l\",\"modal\":\"cards_modal__1M1p0\",\"btn\":\"cards_btn__1zx6C\",\"paginationContainer\":\"cards_paginationContainer__1zhtM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__OAs1w\",\"menuBars\":\"Navbar_menuBars__WERtn\",\"navMenu\":\"Navbar_navMenu__-ix2T\",\"active\":\"Navbar_active__2DBM2\",\"navText\":\"Navbar_navText__1Bljv\",\"navMenuItems\":\"Navbar_navMenuItems__T0h0n\",\"navbarToggle\":\"Navbar_navbarToggle__1_4YV\",\"navbarTitle\":\"Navbar_navbarTitle__AotrB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileBlock\":\"Profile_profileBlock__F0aOO\",\"nameBlock\":\"Profile_nameBlock__15iN1\",\"hiddenText\":\"Profile_hiddenText__17X1j\",\"showText\":\"Profile_showText__1DQ3x\",\"editName\":\"Profile_editName__9iLd_\",\"showName\":\"Profile_showName__fJjAE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"commonBlock\":\"Common_commonBlock__1cQxG\",\"commonContainer\":\"Common_commonContainer__3mVIZ\",\"title\":\"Common_title__3UM9o\",\"formBlock\":\"Common_formBlock__13VZl\",\"error\":\"Common_error__2vZGr\",\"registrationError\":\"Common_registrationError__2etfa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__yG9Bc\",\"currentButton\":\"Pagination_currentButton__1OG7c\",\"paginationButton\":\"Pagination_paginationButton__wUJuT\",\"navigationButton\":\"Pagination_navigationButton__2Z_HB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsPackContainer\":\"SettingsPacksPanel_settingsPackContainer__3ZtCV\",\"setCheck\":\"SettingsPacksPanel_setCheck__objlf\",\"rangeSlider\":\"SettingsPacksPanel_rangeSlider__5Oeq0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"CommonInput_group__22ObE\",\"bar\":\"CommonInput_bar__15uPu\",\"highlight\":\"CommonInput_highlight__3kNjV\",\"inputHighlighter\":\"CommonInput_inputHighlighter__3cxWz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cbContainer\":\"CommonCheckbox_cbContainer__3Ot90\",\"optionInput\":\"CommonCheckbox_optionInput__3oNeM\",\"click-wave\":\"CommonCheckbox_click-wave__2xti6\",\"radio\":\"CommonCheckbox_radio__1T0ne\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"CommonButton_btn__1oXtD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderContainer\":\"Preloader_preloaderContainer__39aZc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Login_checkbox__3kUit\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"Test_test__PWdQ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Packs_table__9dHFR\",\"tableContainer\":\"Packs_tableContainer__2tlGo\",\"tableItem\":\"Packs_tableItem__1Xq3J\",\"sortButton\":\"Packs_sortButton__B6dEF\",\"sortButtonActive\":\"Packs_sortButtonActive__1nPON\",\"sortButtonInc\":\"Packs_sortButtonInc__2tZsa\",\"sortButtonDec\":\"Packs_sortButtonDec__TnDcJ\",\"modal\":\"Packs_modal__DlkOQ\"};"],"sourceRoot":""}