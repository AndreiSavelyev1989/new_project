{"version":3,"sources":["m1-ui/pages/packs/Packs.module.css","m1-ui/pages/cards/cards.module.css","m1-ui/navbar/Navbar.module.css","common/c1-CommonInput/CommonInput.module.css","common/c3-CommonCheckbox/CommonCheckbox.module.css","assets/style/Common.module.css","common/c2-CommonButton/CommonButton.module.css","m1-ui/pages/profile/Profile.module.css","m1-ui/preloader/Preloader.module.css","m1-ui/pages/login/Login.module.css","m1-ui/pages/test/Test.module.css","m3-dal/api.ts","m2-bll/redusers/auth-reducer.ts","common/c2-CommonButton/CommonButton.tsx","assets/images/avatar.png","assets/images/preloader.svg","m1-ui/preloader/Preloader.tsx","m1-ui/pages/profile/Profile.tsx","common/c1-CommonInput/CommonInput.tsx","common/c3-CommonCheckbox/CommonCheckbox.tsx","m1-ui/pages/login/Login.tsx","m2-bll/redusers/restore-reducer.ts","m1-ui/pages/new-password/NewPassword.tsx","m2-bll/redusers/registration-reducer.ts","m1-ui/pages/registration/Registration.tsx","m1-ui/pages/restore-password/RestorePassword.tsx","m1-ui/pages/test/Test.tsx","m1-ui/pages/error404/Error404.tsx","m2-bll/redusers/pack-reducer.ts","m1-ui/pages/packs/pack/Pack.tsx","m1-ui/pages/packs/Packs.tsx","m2-bll/redusers/cards-reducer.ts","m1-ui/pages/cards/Card.tsx","m1-ui/pages/cards/Cards.tsx","m1-ui/routes/Routes.tsx","m1-ui/navbar/Navbar.tsx","App.tsx","reportWebVitals.ts","m2-bll/state/store.ts","m2-bll/redusers/profile-reducer.ts","index.tsx"],"names":["module","exports","instanceHeroku","axios","create","withCredentials","baseURL","cardsPackAPI","get","cardsPack","post","id","delete","authApi","data","name","avatar","put","restoreAPI","restorePassword","email","a","from","message","promise","setNewPassword","password","resetPasswordToken","registrationAPI","cardsAPI","getCards","cardsPackId","addCard","card","cardsPack_id","delCard","cardId","updateCard","_id","question","comments","addPack","intialState","isLoggedIn","error","isFetching","isInitialized","authUserData","setErrorAC","type","isLogedInAC","value","setIsFetchingAC","setUserData","updateMeDataTC","dispatch","getState","res","updatedUser","response","console","log","CommonButton","red","className","restProps","s","btn","Preloader","style","preloaderContainer","src","preloader","alt","Profile","useDispatch","useSelector","state","auth","useState","editMode","setEditMode","userName","setUserName","userAvatar","useEffect","profileBlock","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","onClick","to","PATH","LOGIN","CommonInput","formikFieldsProps","label","group","required","highlight","bar","CommonCheckbox","onChangeChecked","spanClassName","children","cbContainer","optionInput","Login","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","commonContainer","title","formBlock","handleSubmit","getFieldProps","touched","registrationError","checkbox","SUCCESS_SUBMIT","FAILED_SUBMIT","INIT","SET_IS_PASSWORD_CHANGED","successSubmit","status","failedSubmit","initRestorePage","initialState","currentEmail","isPasswordChanged","NewPassword","useParams","restore","passwordConfirm","token","setTimeout","isRegistered","Registration","registration","then","catch","finally","RestorePassword","submitRestorePassword","useCallback","Test","Error404","getPacks","setPack","cardPacks","Pack","props","table","tableContainer","tableItem","cardsCount","updated","url","CARDS","Packs","packs","mappedPacks","map","p","user_name","cardPack","GET_CARDS","SET_IS_FETCHING","cards","options","getCardsByPackId","packId","Card","answer","grade","questionImg","delCardClick","target","dataset","updateCardClick","data-id","Cards","addCardClick","fieldsWithCards","NEW_PASSWORD","PROFILE","REGISTRATION","RESTORE_PASSWORD","TEST","PACKS","Routes","commonBlock","exact","path","render","Navbar","navbarBlock","activeClassName","active","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","profile","action","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d91230bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Packs_table__KZQpX\",\"tableContainer\":\"Packs_tableContainer__3JuF2\",\"tableItem\":\"Packs_tableItem__2rZOA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"cards_table__1oLsk\",\"table__cell\":\"cards_table__cell__vPzp2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbarBlock\":\"Navbar_navbarBlock__2wyuz\",\"active\":\"Navbar_active__3WZo-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"CommonInput_group__2fckV\",\"bar\":\"CommonInput_bar__GpAhy\",\"highlight\":\"CommonInput_highlight__3y1Xi\",\"inputHighlighter\":\"CommonInput_inputHighlighter__2PJXc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cbContainer\":\"CommonCheckbox_cbContainer__1Rlmv\",\"optionInput\":\"CommonCheckbox_optionInput__K3vkX\",\"click-wave\":\"CommonCheckbox_click-wave__2k1RO\",\"radio\":\"CommonCheckbox_radio__13Kc_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"commonBlock\":\"Common_commonBlock__1onnh\",\"commonContainer\":\"Common_commonContainer__VPZFU\",\"title\":\"Common_title__3AOve\",\"formBlock\":\"Common_formBlock__1qqQX\",\"error\":\"Common_error__32O98\",\"registrationError\":\"Common_registrationError__o7Dr2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"CommonButton_btn__1PMfW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileBlock\":\"Profile_profileBlock__9MaX2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderContainer\":\"Preloader_preloaderContainer__otx3L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Login_checkbox__3ocOq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"Test_test__1h1Vp\"};","import axios from \"axios\";\r\nimport {CardPacksType} from \"../m2-bll/redusers/pack-reducer\";\r\n\r\n// const instance = axios.create({\r\n//     baseURL: \"http://localhost:7542/2.0/\",\r\n//     withCredentials: true\r\n// })\r\n\r\nconst instanceHeroku = axios.create(({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n}))\r\n\r\n//Cards Api\r\nexport const cardsPackAPI = {\r\n    getPacks() {\r\n        return instanceHeroku.get<GetPacksResponseType>('cards/pack')\r\n    },\r\n    createPack(cardsPack:CardPacksType) {\r\n        return instanceHeroku.post('cards/pack', {cardsPack: {...cardsPack}})\r\n    },\r\n    deletePack(id:string) {\r\n        return instanceHeroku.delete(`cards/pack?id=${id}`)\r\n    }\r\n\r\n}\r\n//Packs Type\r\nexport type GetPacksResponseType = {\r\n    cardPacks: CardPacksType[],\r\n    page: number,\r\n    pageCount: number,\r\n    cardPacksTotalCount: number,\r\n    minCardsCount: number,\r\n    maxCardsCount: number,\r\n    token: string,\r\n    tokenDeathTime: string\r\n}\r\n\r\n\r\n//Auth api\r\nexport const authApi = {\r\n    login(data: LoginDataType) {\r\n        return instanceHeroku.post<LoginResponseType>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instanceHeroku.post(\"auth/me\")\r\n    },\r\n    updateMe(name: string, avatar: string){\r\n       return instanceHeroku.put(\"auth/me\", {name, avatar})\r\n    },\r\n    logout() {\r\n        return instanceHeroku.delete(\"auth/me\")\r\n    }\r\n}\r\n\r\nexport const restoreAPI = {\r\n    restorePassword: async (email: string | null) => {\r\n        const promise = await instanceHeroku.post<ResponseRestoreType>('auth/forgot', {\r\n            email,\r\n            from: 'dreamonaut@mail.ru',\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n              password recovery link: \t\r\n              <a href='http://localhost:3000/new_project/#/new-password/$token$'>\t\r\n              Follow the link to set a new password</a></div>`,\r\n        });\r\n        return promise;\r\n    },\r\n    setNewPassword: async (password: string, resetPasswordToken: string) => {\r\n        const promise = await instanceHeroku.post<ResponseRestoreType>('auth/set-new-password', {\r\n            password: password,\r\n            resetPasswordToken: resetPasswordToken,\r\n        });\r\n        return promise;\r\n    },\r\n};\r\nexport const registrationAPI = {\r\n    setRegistration(data: RegistrationParamsType) {\r\n        return instanceHeroku.post<ResponseRegistrationType>(\"auth/register\", data)\r\n    }\r\n}\r\n//Auth Type\r\n// Request types\r\nexport type RegistrationParamsType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n//Response types\r\ntype ResponseRestoreType = {\r\n    info: string,\r\n    error?: string\r\n};\r\n\r\ntype ResponseLoginRegistrationType = {\r\n    email?: string\r\n    created?: string\r\n    isAdmin?: boolean\r\n    name: string\r\n    publicCardPacksCount?: number\r\n    rememberMe?: boolean\r\n    updated?: string\r\n    verified?: boolean\r\n    _id?: string\r\n}\r\ntype RegistrationType = {\r\n    __v: number\r\n}\r\ntype LoginType = {\r\n    avatar?: string;\r\n    error?: string;\r\n}\r\n\r\ntype ResponseRegistrationType = ResponseLoginRegistrationType & RegistrationType\r\n\r\nexport type LoginResponseType = ResponseLoginRegistrationType & LoginType\r\n\r\n\r\n\r\n//Cards API\r\nexport const cardsAPI = {\r\n    getCards: async (cardsPackId: string) => {\r\n      return instanceHeroku.get(\r\n        `cards/card?cardsPack_id=${cardsPackId}`\r\n      );\r\n    },\r\n    addCard: async (cardsPackId: string) => {\r\n      return instanceHeroku.post('cards/card', {\r\n        card: {\r\n          cardsPack_id: `${cardsPackId}`,\r\n        },\r\n      });\r\n    },\r\n    delCard: async (cardId: string) => {\r\n      return instanceHeroku.delete(`cards/card?id=${cardId}`);\r\n    },\r\n    updateCard: async (cardId: string) => {\r\n      return instanceHeroku.put('cards/card', {\r\n        card: {\r\n          _id: `${cardId}`,\r\n          question: 'Updated',\r\n          comments: 'Updated'\r\n        },\r\n      });\r\n    },\r\n    addPack: async () => {\r\n      return instanceHeroku.post('/cards/pack', {\r\n        cardsPack: {},\r\n      });\r\n    },\r\n  };\r\n  \r\n\r\ntype ResponseCardType = {\r\n    answer: string;\r\n    question: string;\r\n    cardsPack_id: string;\r\n    grade: number;\r\n    rating: number;\r\n    shots: number;\r\n    type: string;\r\n    user_id: string;\r\n    created: string;\r\n    updated: string;\r\n    __v: number;\r\n    _id: string;\r\n  };\r\n  \r\ntype ResponseCardOptionsType = {\r\n    cardsTotalCount: number;\r\n    maxGrade: number;\r\n    minGrade: number;\r\n    page: number;\r\n    pageCount: number;\r\n    packUserId: string;\r\n  };\r\n\r\n","\r\nimport {authApi, LoginDataType} from \"../../m3-dal/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../state/store\";\r\n\r\nexport type initialStateType = {\r\n    isLoggedIn: boolean\r\n    error: string | null\r\n    isFetching: boolean\r\n    isInitialized: boolean\r\n    authUserData: {\r\n        name: string\r\n        avatar: string\r\n    }\r\n\r\n}\r\nconst intialState: initialStateType = {\r\n    isLoggedIn: false,\r\n    error: null,\r\n    isFetching: false,\r\n    isInitialized: false,\r\n    authUserData: {\r\n        name: \"\",\r\n        avatar: \"\",\r\n    }\r\n}\r\n\r\n//reducers\r\nexport const authReducer = (state = intialState, action: ActionLoginType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"auth/SET-IS-LOGGED-IN\": {\r\n            return {...state, isLoggedIn: action.value}\r\n        }\r\n        case \"auth/ERROR\": {\r\n            return {...state, error: action.error}\r\n        }\r\n        case \"auth/INITIALIZED\": {\r\n            return {...state, isInitialized: action.isInitialized}\r\n        }\r\n        case \"auth/SET-IS-FETCHING\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"auth/SET-USER-DATA\": {\r\n            return {\r\n                ...state,\r\n                authUserData: {\r\n                    ...state.authUserData,\r\n                    name: action.name,\r\n                    avatar: action.avatar\r\n                }\r\n\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\n\r\nexport const setErrorAC = (error: string | null) => ({type: \"auth/ERROR\", error} as const)\r\nexport const isLogedInAC = (value: boolean) => ({type: \"auth/SET-IS-LOGGED-IN\", value} as const)\r\nexport const setIsFetchingAC = (isFetching: boolean) => ({type: \"auth/SET-IS-FETCHING\", isFetching} as const)\r\nexport const setIsInitialized = (isInitialized: boolean) => ({type: 'auth/INITIALIZED', isInitialized} as const)\r\nexport const setUserData = (name: string, avatar: string) => ({type: 'auth/SET-USER-DATA', name, avatar} as const)\r\n\r\nexport type ActionLoginType =\r\n    | ReturnType<typeof isLogedInAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setIsFetchingAC>\r\n    | ReturnType<typeof setIsInitialized>\r\n    | ReturnType<typeof setUserData>\r\n\r\ntype ThunkAuthType = ThunkAction<void, AppRootStateType, unknown, ActionLoginType>\r\n//thunk\r\nexport const loginTC = (data: LoginDataType): ThunkAuthType => async (dispatch) => {\r\n    try {\r\n        dispatch(setIsFetchingAC(true));\r\n        await authApi.login(data);\r\n        dispatch(isLogedInAC(true));\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setErrorAC(error));\r\n        console.log('Error: ', {...e});\r\n        return console.log(error);\r\n    } finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n}\r\n\r\nexport const logoutTC = (): ThunkAuthType => async (dispatch) => {\r\n    try {\r\n        dispatch(setIsFetchingAC(true));\r\n        await authApi.logout();\r\n        dispatch(isLogedInAC(false));\r\n    } finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n}\r\n\r\nexport const authMeTC = (): ThunkAuthType => async (dispatch, getState) => {\r\n    try {\r\n        dispatch(setIsFetchingAC(true));\r\n        const res = await authApi.me();\r\n        dispatch(setUserData(res.data.name, res.data.avatar))\r\n        dispatch(setIsInitialized(true));\r\n        dispatch(isLogedInAC(true));\r\n    } finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n}\r\n\r\nexport const updateMeDataTC = (name: string, avatar: string): ThunkAuthType => async (dispatch, getState) => {\r\n    try {\r\n        dispatch(setIsFetchingAC(true));\r\n        const res = await authApi.updateMe(name, avatar)\r\n        dispatch(setUserData(res.data.updatedUser.name, res.data.updatedUser.avatar))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setErrorAC(error))\r\n        console.log('Error: ', {...e})\r\n        return console.log(error)\r\n    }\r\n    finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./CommonButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n    error?: string\r\n    name: string\r\n}\r\n\r\nconst CommonButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        error,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <button\r\n            className={s.btn}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        >{restProps.name}</button>\r\n    );\r\n}\r\n\r\nexport default CommonButton;\r\n","export default __webpack_public_path__ + \"static/media/avatar.6afeb838.png\";","export default __webpack_public_path__ + \"static/media/preloader.259f14e1.svg\";","import React from \"react\";\r\nimport preloader from \"./../../assets/images/preloader.svg\";\r\nimport style from \"./Preloader.module.css\"\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={style.preloaderContainer}>\r\n            <div>Loading:</div>\r\n            <img src={preloader} alt=\"preloader\"/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../../m2-bll/state/store';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {authMeTC, initialStateType, logoutTC, setUserData, updateMeDataTC} from '../../../m2-bll/redusers/auth-reducer';\r\nimport CommonButton from '../../../common/c2-CommonButton/CommonButton';\r\nimport style from './Profile.module.css';\r\nimport avatar from './../../../assets/images/avatar.png'\r\nimport CommonInput from \"../../../common/c1-CommonInput/CommonInput\";\r\nimport {Preloader} from \"../../preloader/Preloader\";\r\n\r\n\r\nexport const Profile = () => {\r\n    const dispatch = useDispatch();\r\n    const {isInitialized, isLoggedIn, authUserData, isFetching} = useSelector<AppRootStateType,\r\n        initialStateType>((state) => state.auth);\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [userName, setUserName] = useState(authUserData.name)\r\n    const [userAvatar, setUserAvatar] = useState(authUserData.avatar)\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn && isInitialized) {\r\n            dispatch(updateMeDataTC(userName, userAvatar))\r\n        }\r\n        if (!isInitialized) {\r\n            dispatch(authMeTC());\r\n        }\r\n    }, []);\r\n\r\n    const logoutCallBack = () => {\r\n        dispatch(logoutTC());\r\n    };\r\n\r\n    const onNameChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setUserName(e.currentTarget.value)\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setUserName(userName);\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        dispatch(updateMeDataTC(userName, userAvatar))\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>;\r\n    }\r\n    return (\r\n        //need to fix - hardcode avatar\r\n        <div className={style.profileBlock}>\r\n            <div>{authUserData.avatar\r\n                ? <img src={avatar} alt=\"user-avatar\"/>\r\n                : authUserData.avatar}\r\n            </div>\r\n            <div>\r\n                {editMode\r\n                    ? <input type='text'\r\n                             onChange={onNameChangeHandler}\r\n                             autoFocus\r\n                             onBlur={activateViewMode}\r\n                             value={userName}/>\r\n                    : <span onDoubleClick={activateEditMode}>{isFetching ? <Preloader/> : authUserData.name}</span>\r\n                }\r\n            </div>\r\n            <div>\r\n                <CommonButton name={'logout'} onClick={logoutCallBack}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./CommonInput.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    label?: string\r\n    formikFieldsProps?: any\r\n    error?: any\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onBlur?: () => void\r\n    value?: any\r\n};\r\n\r\nconst CommonInput: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        formikFieldsProps,\r\n        label,\r\n        error,\r\n        onChange,\r\n        onBlur,\r\n        value,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <>\r\n            <div className={s.group}>\r\n                <input\r\n                    type={type}\r\n                    {...formikFieldsProps}\r\n                    // onChange={onChange}\r\n                    // onBlur={onBlur}\r\n                    // value={value}\r\n                    // autoFocus\r\n                    required\r\n                />\r\n                <span className={s.highlight}> </span>\r\n                <span className={s.bar}> </span>\r\n                <label>{label}</label>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CommonInput;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./CommonCheckbox.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n    formikFieldsProps?: any\r\n};\r\n\r\nconst CommonCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n        formikFieldsProps,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n\r\n\r\n    return (<div className={s.cbContainer}>\r\n        <label>\r\n            <input className={s.optionInput}\r\n                type={\"checkbox\"}\r\n                {...formikFieldsProps}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            /> Remember me\r\n        </label>\r\n        </div> // благодаря label нажатие на спан передастся в инпут\r\n    );\r\n}\r\n\r\nexport default CommonCheckbox;\r\n","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/state/store\";\r\nimport {initialStateType, isLogedInAC, loginTC} from \"../../../m2-bll/redusers/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport CommonInput from \"../../../common/c1-CommonInput/CommonInput\";\r\nimport CommonButton from \"../../../common/c2-CommonButton/CommonButton\";\r\nimport style from \"./../../../assets/style/Common.module.css\";\r\nimport CommonCheckbox from \"../../../common/c3-CommonCheckbox/CommonCheckbox\";\r\nimport s from \"./Login.module.css\"\r\nimport {Preloader} from \"../../preloader/Preloader\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch() //разобраться с useDispatch\r\n    const {isFetching, error, isLoggedIn, isInitialized} = useSelector<AppRootStateType, initialStateType>(state => state.auth);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Password must be 15 characters or less';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be 8 characters or more ';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        console.log(isLoggedIn, isInitialized)\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n    return (\r\n        <div className={style.commonContainer}>\r\n            <h1 className={style.title}>Login Here</h1>\r\n            <div className={style.error}>{error ? error : null}</div>\r\n            <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n                <CommonInput\r\n                    type={\"text\"}\r\n                    label={\"Email\"}\r\n                    formikFieldsProps={{...formik.getFieldProps(\"email\")}}/>\r\n                {formik.touched.email && formik.errors.email ?\r\n                    <div className={style.registrationError}>{formik.errors.email}</div> : null}\r\n\r\n                <CommonInput\r\n                    type={\"password\"}\r\n                    label={\"Password\"}\r\n                    formikFieldsProps={{...formik.getFieldProps(\"password\")}}/>\r\n                {formik.touched.password && formik.errors.password ?\r\n                    <div className={style.registrationError}>{formik.errors.password}</div> : null}\r\n\r\n                <div className={s.checkbox}>\r\n                    <CommonCheckbox\r\n                        type={\"checkbox\"}\r\n                        formikFieldsProps={{...formik.getFieldProps(\"rememberMe\")}}/>\r\n\r\n                </div>\r\n                {isFetching ? <Preloader/> : <CommonButton type={\"submit\"} name={\"Login\"}/>}\r\n            </form>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from 'redux';\r\nimport {restoreAPI} from '../../m3-dal/api';\r\nimport {setIsFetchingAC} from \"./auth-reducer\";\r\n\r\nconst SUCCESS_SUBMIT = 'restore/SUCCESS_SUBMIT';\r\nconst FAILED_SUBMIT = 'restore/FAILED_SUBMIT';\r\nconst INIT = 'restore/INIT';\r\nconst SET_IS_PASSWORD_CHANGED = 'restore/SET_IS_PASSWORD_CHANGED';\r\n\r\ntype SuccessSubmitType = {\r\n    type: typeof SUCCESS_SUBMIT;\r\n    status: string;\r\n};\r\n\r\ntype FailedSubmitType = {\r\n    type: typeof FAILED_SUBMIT;\r\n    error: string;\r\n    status: string;\r\n};\r\n\r\ntype InitType = {\r\n    type: typeof INIT;\r\n};\r\n\r\ntype SetIsPasswordChangedType = {\r\n    type: typeof SET_IS_PASSWORD_CHANGED;\r\n    isPasswordChanged: boolean;\r\n};\r\n\r\ntype ActionsType =\r\n    | SuccessSubmitType\r\n    | FailedSubmitType\r\n    | InitType\r\n    | SetIsPasswordChangedType;\r\n\r\nexport type RestoreStateType = {\r\n    currentEmail: null | string;\r\n    error: null | string;\r\n    status: null | string;\r\n    isPasswordChanged: boolean;\r\n};\r\n\r\nexport const successSubmit = (status: string): SuccessSubmitType => ({type: SUCCESS_SUBMIT, status,});\r\nexport const failedSubmit = (error: string, status: string): FailedSubmitType => ({\r\n    type: FAILED_SUBMIT,\r\n    error,\r\n    status,\r\n});\r\nexport const initRestorePage = (): InitType => ({type: INIT,});\r\nexport const setIsPasswordChanged = (isPasswordChanged: boolean): SetIsPasswordChangedType => ({\r\n    type: SET_IS_PASSWORD_CHANGED,\r\n    isPasswordChanged,\r\n});\r\n\r\nconst initialState: RestoreStateType = {\r\n    currentEmail: null,\r\n    error: null,\r\n    status: null,\r\n    isPasswordChanged: false,\r\n};\r\n\r\nexport const restoreReducer = (state: RestoreStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case SUCCESS_SUBMIT: {\r\n            return {...state, currentEmail: null, status: action.status};\r\n        }\r\n        case FAILED_SUBMIT: {\r\n            return {\r\n                ...state,\r\n                currentEmail: null,\r\n                error: action.error,\r\n                status: action.status,\r\n            };\r\n        }\r\n        case INIT: {\r\n            return {...state, status: null, error: null};\r\n        }\r\n        case SET_IS_PASSWORD_CHANGED: {\r\n            return {...state, isPasswordChanged: action.isPasswordChanged};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const restorePassword = (email: string | null) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setIsFetchingAC(true))\r\n        await restoreAPI.restorePassword(email);\r\n        dispatch(setIsFetchingAC(false))\r\n        dispatch(successSubmit('New password send to your email'));\r\n    } catch (e) {\r\n        dispatch(setIsFetchingAC(false))\r\n        dispatch(failedSubmit(e.response.data.error, 'Email not found'));\r\n    }\r\n};\r\n\r\nexport const setNewPassword = (password: string, token: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setIsFetchingAC(true))\r\n        await restoreAPI.setNewPassword(password, token);\r\n        dispatch(setIsFetchingAC(false))\r\n        dispatch(successSubmit('Password has been changed'));\r\n        setTimeout(() => dispatch(setIsPasswordChanged(true)), 3000);\r\n    } catch (e) {\r\n        dispatch(setIsFetchingAC(false))\r\n        dispatch(failedSubmit(e.response.data.error, 'Error'));\r\n    }\r\n};\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    RestoreStateType,\r\n    setNewPassword,\r\n    initRestorePage,\r\n} from '../../../m2-bll/redusers/restore-reducer';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../../m2-bll/state/store';\r\nimport {useFormik} from 'formik';\r\nimport CommonButton from '../../../common/c2-CommonButton/CommonButton';\r\nimport CommonInput from '../../../common/c1-CommonInput/CommonInput';\r\nimport style from './../../../assets/style/Common.module.css';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {Preloader} from \"../../preloader/Preloader\";\r\n\r\ntype FormikErrorType = {\r\n    passwordConfirm?: string;\r\n    password?: string;\r\n};\r\n\r\nexport const NewPassword = () => {\r\n    const dispatch = useDispatch();\r\n    const {resetPasswordToken} = useParams<Record<string, string>>();\r\n    const {status, isPasswordChanged} = useSelector<AppRootStateType, RestoreStateType>(state => state.restore);\r\n    const isFetching = useSelector<AppRootStateType, boolean>(state => state.auth.isFetching);\r\n\r\n    useEffect(() => {\r\n        dispatch(initRestorePage());\r\n    }, []);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            passwordConfirm: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Password must be 15 characters or less';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be more than 7 characters ';\r\n            }\r\n\r\n            if (!values.passwordConfirm) {\r\n                errors.passwordConfirm = 'Required';\r\n            } else if (values.password !== values.passwordConfirm) {\r\n                errors.passwordConfirm = 'Password and Confirm Password must be equal';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            if (values.password === values.passwordConfirm) {\r\n                dispatch(setNewPassword(values.password, resetPasswordToken));\r\n            }\r\n        },\r\n    });\r\n\r\n    if (isPasswordChanged) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n        <div className={style.commonContainer}>\r\n            <h1 className={style.title}>Set new password</h1>\r\n            <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n                <div className={style.error}>{status && status}</div>\r\n                <CommonInput\r\n                    type={'password'}\r\n                    label={'Password'}\r\n                    formikFieldsProps={{...formik.getFieldProps('password')}}\r\n                />\r\n\r\n                {formik.touched.password && formik.errors.password ? (\r\n                    <div className={style.registrationError}>\r\n                        {formik.errors.password}\r\n                    </div>\r\n                ) : null}\r\n\r\n                <CommonInput\r\n                    type={'password'}\r\n                    label={'Confirm Password'}\r\n                    formikFieldsProps={{...formik.getFieldProps('passwordConfirm')}}\r\n                />\r\n\r\n                {formik.touched.passwordConfirm && formik.errors.passwordConfirm ? (\r\n                    <div className={style.registrationError}>\r\n                        {formik.errors.passwordConfirm}\r\n                    </div>\r\n                ) : null}\r\n                {isFetching ? <Preloader/> : <CommonButton type={'submit'} name={'Send'}/>}\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n","import {Dispatch} from \"redux\";\r\nimport {registrationAPI, RegistrationParamsType} from \"../../m3-dal/api\";\r\nimport {setIsFetchingAC} from \"./auth-reducer\";\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n    error: null\r\n}\r\n\r\nexport type InitialStateType = {\r\n    isRegistered: boolean\r\n    error: null | string\r\n}\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"registration/SET-REGISTRATION\":\r\n            return {...state, isRegistered: action.value}\r\n        case \"registration/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nconst setIsRegisteredAC = (value: boolean) => ({type: \"registration/SET-REGISTRATION\", value} as const)\r\nconst setErrorAC = (error: string | null) => ({type: \"registration/SET-ERROR\", error} as const)\r\n//thunks\r\nexport const registrationTC = (data: RegistrationParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setIsFetchingAC(true))\r\n    registrationAPI.setRegistration(data)\r\n        .then(res => {\r\n            dispatch(setIsRegisteredAC(true))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            console.log('Error: ', {...e})\r\n            dispatch(setErrorAC(error))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsFetchingAC(false))\r\n        })\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsRegisteredAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setIsFetchingAC>\r\n","import React from \"react\";\r\nimport style from \"./../../../assets/style/Common.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {InitialStateType, registrationTC} from \"../../../m2-bll/redusers/registration-reducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../routes/Routes\";\r\nimport {useFormik} from \"formik\";\r\nimport CommonButton from \"../../../common/c2-CommonButton/CommonButton\";\r\nimport CommonInput from \"../../../common/c1-CommonInput/CommonInput\";\r\nimport {Preloader} from \"../../preloader/Preloader\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    passwordConfirm?: string\r\n}\r\n\r\nexport const Registration = () => {\r\n    const {isRegistered, error} = useSelector<AppRootStateType, InitialStateType>(state => state.registration)\r\n    const isFetching = useSelector<AppRootStateType, boolean>(state => state.auth.isFetching)\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            passwordConfirm: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Password must be 15 characters or less';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be more than 7 characters ';\r\n            }\r\n\r\n            if (!values.passwordConfirm) {\r\n                errors.passwordConfirm = 'Required';\r\n            } else if (values.password !== values.passwordConfirm) {\r\n                errors.passwordConfirm = 'Password and Confirm Password must be equal'\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            if (values.password === values.passwordConfirm) {\r\n                dispatch(registrationTC(values))\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.commonContainer}>\r\n            <h1 className={style.title}>Registration</h1>\r\n            <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n                <div className={style.error}>{error ? error : null}</div>\r\n\r\n                <CommonInput\r\n                    type={\"text\"}\r\n                    label={\"Email\"}\r\n                    error={error || (formik.errors && formik.touched)}\r\n                    formikFieldsProps={{...formik.getFieldProps(\"email\")}}/>\r\n\r\n                {formik.touched.email && formik.errors.email ?\r\n                    <div className={style.registrationError}>{formik.errors.email}</div> : null}\r\n\r\n                <CommonInput\r\n                    type={\"password\"}\r\n                    label={\"Password\"}\r\n                    formikFieldsProps={{...formik.getFieldProps(\"password\")}}/>\r\n\r\n                {formik.touched.password && formik.errors.password ?\r\n                    <div className={style.registrationError}>{formik.errors.password}</div> : null}\r\n\r\n                    <CommonInput\r\n                        type={\"password\"}\r\n                        label={\"Confirm Password\"}\r\n                        formikFieldsProps={{...formik.getFieldProps(\"passwordConfirm\")}}\r\n                    />\r\n\r\n                {formik.touched.passwordConfirm && formik.errors.passwordConfirm ?\r\n                    <div className={style.registrationError}>{formik.errors.passwordConfirm}</div> : null}\r\n\r\n                {isFetching ? <Preloader/> : <CommonButton type={\"submit\"} name={\"Sign up\"}/>}\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport {\r\n    initRestorePage,\r\n    restorePassword,\r\n    RestoreStateType,\r\n} from '../../../m2-bll/redusers/restore-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../m2-bll/state/store';\r\nimport {useFormik} from 'formik';\r\nimport CommonButton from '../../../common/c2-CommonButton/CommonButton';\r\nimport CommonInput from '../../../common/c1-CommonInput/CommonInput';\r\nimport style from './../../../assets/style/Common.module.css';\r\nimport {Preloader} from '../../preloader/Preloader';\r\n\r\ntype FormikErrorType = {\r\n    email?: string;\r\n};\r\n\r\nexport const RestorePassword = () => {\r\n    const dispatch = useDispatch();\r\n    const {currentEmail, status} = useSelector<AppRootStateType,\r\n        RestoreStateType>((state) => state.restore);\r\n    const isFetching = useSelector<AppRootStateType, boolean>(\r\n        (state) => state.auth.isFetching\r\n    );\r\n\r\n    const submitRestorePassword = useCallback(\r\n        (currentEmail) => {\r\n            dispatch(restorePassword(currentEmail));\r\n        },\r\n        [currentEmail]\r\n    );\r\n\r\n    useEffect(() => {\r\n        dispatch(initRestorePage());\r\n    }, []);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (\r\n                /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)/.test(\r\n                    values.email\r\n                )\r\n            ) {\r\n                return undefined;\r\n            } else {\r\n                errors.email = 'Write correct email';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            submitRestorePassword(values.email);\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div className={style.commonContainer}>\r\n            <h1 className={style.title}>Restore</h1>\r\n            <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n                <div className={style.error}>{status && status}</div>\r\n                <CommonInput\r\n                    type={'text'}\r\n                    label={'Email'}\r\n                    formikFieldsProps={{...formik.getFieldProps('email')}}\r\n                />\r\n\r\n                {formik.touched.email && formik.errors.email ? (\r\n                    <div className={style.registrationError}>{formik.errors.email}</div>\r\n                ) : null}\r\n                {isFetching ? (\r\n                    <Preloader/>\r\n                ) : (\r\n                    <CommonButton type={'submit'} name={'Send request'}/>\r\n                )}\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport CommonButton from \"../../../common/c2-CommonButton/CommonButton\";\r\nimport CommonInput from \"../../../common/c1-CommonInput/CommonInput\";\r\nimport CommonCheckbox from \"../../../common/c3-CommonCheckbox/CommonCheckbox\";\r\nimport style from \"./Test.module.css\"\r\n\r\nexport const Test = () => {\r\n    return (\r\n        <div className={style.test}>\r\n            <CommonButton name={'test'}/>\r\n            <CommonInput label={'Test'}/>\r\n            <CommonCheckbox/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\n\nexport const Error404 = () => {\n    return (\n        <div>\n            Error404\n        </div>\n    )\n}","import {cardsPackAPI} from \"../../m3-dal/api\";\r\nimport {ActionLoginType, setErrorAC, setIsFetchingAC} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../state/store\";\r\n\r\n\r\nconst initialState = {\r\n    cardsPack: [] as CardPacksType[]\r\n}\r\n\r\n//types\r\nexport type CardsPackInitialStateType = typeof initialState\r\nexport type CardPacksType = {\r\n    _id?: string\r\n    user_id?: string\r\n    user_name?: string\r\n    private?: boolean\r\n    name: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    cardsCount?: number | undefined\r\n    type?: string\r\n    rating?: number\r\n    created?: string | undefined\r\n    updated?: string\r\n    more_id?: string\r\n    __v?: number\r\n}\r\n\r\n//actions\r\nexport const setCardsPacksAC = (setPack: CardPacksType[]) => ({type: 'pack/SET-PACKS', setPack} as const)\r\n\r\n\r\ntype ActionPacksType =\r\n    |ActionLoginType\r\n    | ReturnType<typeof setCardsPacksAC>\r\n    | ReturnType<typeof setErrorAC>\r\n\r\ntype ThunkPacksType = ThunkAction<void, AppRootStateType, unknown, ActionPacksType>\r\n//reducers\r\nexport const cardPackReducer = (state = initialState, action: ActionPacksType): CardsPackInitialStateType => {\r\n    switch (action.type) {\r\n        case \"pack/SET-PACKS\": {\r\n            return {...state, cardsPack: action.setPack}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//thunks\r\n\r\nexport const getPacks = ():ThunkPacksType  => async (dispatch) => {\r\n\r\n    try {\r\n        dispatch(setIsFetchingAC(true));\r\n        const res = await cardsPackAPI.getPacks()\r\n        dispatch(setCardsPacksAC(res.data.cardPacks))\r\n        console.log(res)\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setErrorAC(error))\r\n        console.log('Error: ', {...e})\r\n        return console.log(error)\r\n    }\r\n    finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n};\r\n\r\n\r\nexport const createNewPack = (cardPack: CardPacksType): ThunkPacksType => async (dispatch) => {\r\n    try {\r\n        dispatch(setIsFetchingAC(true));\r\n        await cardsPackAPI.createPack(cardPack)\r\n        dispatch(getPacks())\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        console.log('Error: ', {...e})\r\n        dispatch(setErrorAC(error))\r\n        return console.log(error)\r\n    }\r\n    finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n}\r\n\r\nexport const deleteCardPack = (id:string):ThunkPacksType => async (dispatch) => {\r\n    try {\r\n        dispatch(setIsFetchingAC(true));\r\n        await cardsPackAPI.deletePack(id)\r\n        await dispatch(getPacks())\r\n    }\r\n    catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        console.log('Error: ', {...e})\r\n        dispatch(setErrorAC(error))\r\n        return console.log(error)\r\n    }\r\n    finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useEffect} from \"react\";\r\nimport s from \"../Packs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../routes/Routes\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {deleteCardPack, getPacks} from \"../../../../m2-bll/redusers/pack-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    name: string\r\n    cardsCount: number | undefined\r\n    updated: string | undefined\r\n    url: string | undefined\r\n    id: string | undefined\r\n}\r\n\r\n\r\nexport const Pack: React.FC<PropsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const onDeleteCardPackHandler = () => {\r\n        if (props.id) {\r\n            dispatch(deleteCardPack(props.id))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.table}>\r\n            <div className={s.tableContainer}>\r\n                <div className={s.tableItem}>{props.name}</div>\r\n                <div className={s.tableItem}>{props.cardsCount}</div>\r\n                <div className={s.tableItem}>{props.updated}</div>\r\n                <div className={s.tableItem}>{props.url}</div>\r\n                <div className={s.tableItem}>\r\n                    <button onClick={onDeleteCardPackHandler}>del</button>\r\n                </div>\r\n                <div className={s.tableItem}>\r\n                    <NavLink to={PATH.CARDS + '/' + props.id}>CARDS</NavLink>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport s from \"./Packs.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CardPacksType, createNewPack, getPacks} from \"../../../m2-bll/redusers/pack-reducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/state/store\";\r\nimport {Pack} from \"./pack/Pack\";\r\nimport {Preloader} from \"../../preloader/Preloader\";\r\n\r\nexport const Packs = () => {\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<AppRootStateType, Array<CardPacksType>>(state => state.packs.cardsPack)\r\n    const isFetching = useSelector<AppRootStateType, boolean>(state => state.auth.isFetching)\r\n\r\n    useEffect(() => {\r\n        dispatch(getPacks())\r\n    }, [])\r\n\r\n    const mappedPacks = packs.map(p => {\r\n        console.log(p._id)\r\n        return <Pack\r\n            key={p._id}\r\n            name={p.name}\r\n            cardsCount={p.cardsCount}\r\n            updated={p.updated}\r\n            url={p.user_name}\r\n            id={p._id}\r\n        />\r\n    })\r\n\r\n    const onAddCardPackHandler = () => {\r\n        dispatch(createNewPack({\r\n            name: \"new hardcode pack\"\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div className={s.table}>\r\n            <h1 className={s.title}>Packs</h1>\r\n            <div className={s.tableContainer}>\r\n                <div className={s.tableItem}>Pack name</div>\r\n                <div className={s.tableItem}>Cards count</div>\r\n                <div className={s.tableItem}>Updated</div>\r\n                <div className={s.tableItem}>Url</div>\r\n                <div className={s.tableItem}>\r\n                    <button onClick={onAddCardPackHandler}>add</button>\r\n                </div>\r\n                <div className={s.tableItem}>Go to link</div>\r\n            </div>\r\n            {isFetching ? <Preloader/> : mappedPacks}\r\n        </div>\r\n    )\r\n}","import { Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { cardsAPI } from '../../m3-dal/api';\r\nimport { AppRootStateType } from '../state/store';\r\nimport { setIsFetchingAC } from './auth-reducer';\r\n\r\nconst GET_CARDS = 'cards/GET-CARDS';\r\nconst SET_IS_FETCHING = 'cards/SET-IS-FETCHING';\r\n\r\ntype GetCardsType = {\r\n  type: typeof GET_CARDS;\r\n  packId: string;\r\n  cards: Array<CardsType>;\r\n};\r\n\r\ntype CardsType = {\r\n  cardAnswer?: string;\r\n  cardQuestion?: string;\r\n  cardsPack_id: string;\r\n  min?: number;\r\n  max?: number;\r\n  sortCards?: number;\r\n  page?: number;\r\n  pageCount?: number;\r\n};\r\n\r\ntype SetIsFetchingCardsType = {\r\n  type: typeof SET_IS_FETCHING;\r\n};\r\n\r\ntype ActionsType = GetCardsType | SetIsFetchingCardsType;\r\n\r\ntype StateType = {\r\n  cards: Array<CardsType> | [];\r\n  options: {};\r\n  isFetching: boolean;\r\n};\r\n\r\ntype ThunkCardType = ThunkAction<void, AppRootStateType, unknown, ActionsType>;\r\n\r\nexport const setIsFetchingCardsAC = () =>\r\n  ({ type: 'cards/SET-IS-FETCHING' } as const);\r\n\r\nexport const GetCards = (\r\n  packId: string,\r\n  cards: Array<CardsType>\r\n): GetCardsType => ({\r\n  type: GET_CARDS,\r\n  packId,\r\n  cards,\r\n});\r\n\r\nconst initialState = {\r\n  cards: [],\r\n  options: {},\r\n  isFetching: false,\r\n};\r\n\r\nexport const cardsReducer = (\r\n  state: StateType = initialState,\r\n  action: ActionsType\r\n) => {\r\n  switch (action.type) {\r\n    case GET_CARDS: {\r\n      return { ...state, cards: [...action.cards] };\r\n    }\r\n    case SET_IS_FETCHING: {\r\n      return { ...state, isFetching: !state.isFetching };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const getCardsByPackId = (cardsPackId: string) => (\r\n  dispatch: Dispatch\r\n) => {\r\n  try {\r\n    dispatch(setIsFetchingCardsAC());\r\n    cardsAPI.getCards(cardsPackId).then((res) => {\r\n      dispatch(GetCards(cardsPackId, res.data.cards));\r\n      dispatch(setIsFetchingCardsAC());\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport const delCard = (cardId: string, cardsPackId: string): ThunkCardType => (\r\n  dispatch\r\n) => {\r\n  try {\r\n    cardsAPI.delCard(cardId).then(() => {\r\n      dispatch(getCardsByPackId(cardsPackId));\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport const addCard = (cardsPackId: string): ThunkCardType => (dispatch) => {\r\n  try {\r\n    cardsAPI.addCard(cardsPackId).then(() => {\r\n      dispatch(getCardsByPackId(cardsPackId));\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport const updateCard = (\r\n  cardId: string,\r\n  cardsPackId: string\r\n): ThunkCardType => (dispatch) => {\r\n  try {\r\n    cardsAPI.updateCard(cardId).then(() => {\r\n      dispatch(getCardsByPackId(cardsPackId));\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n","import s from './cards.module.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport { delCard, updateCard } from '../../../m2-bll/redusers/cards-reducer';\r\n\r\ntype PropsType = {\r\n  id: string;\r\n  question?: string;\r\n  answer: string;\r\n  updated?: string;\r\n  questionImg?: string;\r\n  cardsPackId: string;\r\n  grade?: string;\r\n};\r\n\r\nexport const Card: React.FC<PropsType> = ({\r\n  id,\r\n  question,\r\n  answer,\r\n  grade,\r\n  updated,\r\n  questionImg,\r\n  cardsPackId,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const delCardClick = (e: any) => {\r\n    const cardId = e.target.dataset.id;\r\n    dispatch(delCard(cardId, cardsPackId));\r\n  };\r\n\r\n  const updateCardClick = (e: any) => {\r\n    const cardId = e.target.dataset.id;\r\n    dispatch(updateCard(cardId, cardsPackId));\r\n  };\r\n  return (\r\n    <tr key={id}>\r\n      <td className={s['table__cell']}>{question}</td>\r\n      <td className={s['table__cell']}>{answer}</td>\r\n      <td className={s['table__cell']}>{grade}</td>\r\n      <td className={s['table__cell']}>{updated}</td>\r\n      <td className={s['table__cell']}>{questionImg}</td>\r\n      <td className={s['table__cell']}>\r\n        <button data-id={id} onClick={(e: any) => delCardClick(e)}>\r\n          Del\r\n        </button>\r\n      </td>\r\n      <td className={s['table__cell']}>\r\n        <button data-id={id} onClick={(e: any) => updateCardClick(e)}>\r\n          Update\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n  addCard,\r\n  getCardsByPackId,\r\n} from '../../../m2-bll/redusers/cards-reducer';\r\nimport { Preloader } from '../../preloader/Preloader';\r\nimport { Card } from './Card';\r\nimport s from './cards.module.css';\r\n\r\nexport const Cards = () => {\r\n  //@ts-ignore\r\n  const { cards, isFetching } = useSelector((state) => state.cards);\r\n  const dispatch = useDispatch();\r\n  const { cardsPackId } = useParams<Record<string, string>>();\r\n\r\n  useEffect(() => {\r\n    dispatch(getCardsByPackId(cardsPackId));\r\n  }, []);\r\n\r\n  const addCardClick = (e: any) => {\r\n    dispatch(addCard(cardsPackId));\r\n  };\r\n\r\n  let fieldsWithCards = cards.map((card: any) => {\r\n    return (\r\n      <Card\r\n        key={card._id}\r\n        id={card._id}\r\n        question={card.question}\r\n        answer={card.answer}\r\n        grade={card.grade}\r\n        updated={card.updated}\r\n        cardsPackId={cardsPackId}\r\n        questionImg={card.questionImg}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {isFetching ? (\r\n        <Preloader />\r\n      ) : (\r\n        <table className={s['table']}>\r\n          <thead>\r\n            <tr className={s['table__row']}>\r\n              <td className={s['table__cell']}>question</td>\r\n              <td className={s['table__cell']}>answer</td>\r\n              <td className={s['table__cell']}>Grade</td>\r\n              <td className={s['table__cell']}>updated</td>\r\n              <td className={s['table__cell']}>url</td>\r\n              <td className={s['table__cell']}>\r\n                <button onClick={(e: any) => addCardClick(e)}>Add</button>\r\n              </td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{fieldsWithCards}</tbody>\r\n        </table>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Profile} from \"../pages/profile/Profile\";\r\nimport {Login} from \"../pages/login/Login\";\r\nimport {NewPassword} from \"../pages/new-password/NewPassword\";\r\nimport {Registration} from \"../pages/registration/Registration\";\r\nimport {RestorePassword} from \"../pages/restore-password/RestorePassword\";\r\nimport {Test} from \"../pages/test/Test\";\r\nimport {Error404} from \"../pages/error404/Error404\";\r\nimport style from \"../../assets/style/Common.module.css\"\r\nimport {Packs} from \"../pages/packs/Packs\";\r\nimport {Cards} from '../pages/cards/Cards';\r\n\r\nexport const PATH = {\r\n    LOGIN: \"/login\",\r\n    NEW_PASSWORD: \"/new-password\",\r\n    PROFILE: \"/profile\",\r\n    REGISTRATION: \"/registration\",\r\n    RESTORE_PASSWORD: \"/restore-password\",\r\n    TEST: \"/test\",\r\n    PACKS: \"/packs\",\r\n    CARDS: \"/cards\"\r\n}\r\n\r\nexport const Routes = () => {\r\n\r\n    return (\r\n        <div className={style.commonBlock}>\r\n            <Switch>\r\n                <Route exact path={\"/\"} render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={`${PATH.NEW_PASSWORD}/:resetPasswordToken`} render={() => <NewPassword/>}/>\r\n                <Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\r\n                <Route path={PATH.RESTORE_PASSWORD} render={() => <RestorePassword/>}/>\r\n                <Route path={PATH.TEST} render={() => <Test/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n                <Route path={`${PATH.CARDS}/:cardsPackId`} render={() => <Cards />}/>\r\n                <Route render={() => <Error404/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../routes/Routes\";\r\nimport style from \"./Navbar.module.css\";\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <div className={style.navbarBlock}>\r\n            <NavLink to={PATH.PROFILE} activeClassName={style.active}>Profile</NavLink>\r\n            <NavLink to={PATH.REGISTRATION} activeClassName={style.active}>Registration</NavLink>\r\n            <NavLink to={PATH.RESTORE_PASSWORD} activeClassName={style.active}>Restore password</NavLink>\r\n            <NavLink to={PATH.NEW_PASSWORD} activeClassName={style.active}>New password</NavLink>\r\n            <NavLink to={PATH.LOGIN} activeClassName={style.active}>Login</NavLink>\r\n            <NavLink to={PATH.PACKS} activeClassName={style.active}>Packs</NavLink>\r\n            <NavLink to={PATH.CARDS} activeClassName={style.active}>Cards</NavLink>\r\n            <NavLink to={PATH.TEST} activeClassName={style.active}>Test</NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Navbar} from './m1-ui/navbar/Navbar';\r\nimport {Routes} from './m1-ui/routes/Routes';\r\n\r\nexport const App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <Navbar/>\r\n            <Routes/>\r\n        </div>\r\n    );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {profileReducer} from \"../redusers/profile-reducer\";\r\nimport {registrationReducer} from \"../redusers/registration-reducer\";\r\nimport {authReducer} from \"../redusers/auth-reducer\";\r\nimport { restoreReducer } from '../redusers/restore-reducer';\r\nimport {cardPackReducer} from \"../redusers/pack-reducer\";\r\nimport { cardsReducer } from '../redusers/cards-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    registration: registrationReducer,\r\n    auth: authReducer,\r\n    restore: restoreReducer,\r\n    packs: cardPackReducer,\r\n    cards: cardsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","\nexport const profileReducer = (state= {}, action: any) => {\n    switch (action.type) {\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./m2-bll/state/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <HashRouter>\n          <Provider store={store}>\n              <App />\n          </Provider>\n      </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}