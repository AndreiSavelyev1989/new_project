{"version":3,"sources":["m1-ui/navbar/Navbar.module.css","assets/style/Common.module.css","common/c1-CommonInput/CommonInput.module.css","common/c3-CommonCheckbox/CommonCheckbox.module.css","common/c2-CommonButton/CommonButton.module.css","m1-ui/pages/login/Login.module.css","m1-ui/pages/test/Test.module.css","m1-ui/pages/profile/Profile.tsx","m3-dal/api.ts","m2-bll/redusers/login-reducer.ts","common/c1-CommonInput/CommonInput.tsx","common/c2-CommonButton/CommonButton.tsx","common/c3-CommonCheckbox/CommonCheckbox.tsx","m1-ui/pages/login/Login.tsx","m2-bll/redusers/restore-reducer.ts","m1-ui/pages/new-password/NewPassword.tsx","m2-bll/redusers/registration-reducer.ts","m1-ui/pages/registration/Registration.tsx","m1-ui/pages/restore-password/RestorePassword.tsx","m1-ui/pages/test/Test.tsx","m1-ui/pages/error404/Error404.tsx","m1-ui/routes/Routes.tsx","m1-ui/navbar/Navbar.tsx","App.tsx","reportWebVitals.ts","m2-bll/state/store.ts","m2-bll/redusers/auth-reducer.ts","m2-bll/redusers/profile-reducer.ts","index.tsx"],"names":["module","exports","Profile","instanceHeroku","axios","create","baseURL","withCredentials","loginApi","data","post","restoreAPI","restorePassword","email","a","from","message","promise","setNewPassword","password","resetPasswordToken","registrationAPI","intialState","isLoggedIn","error","CommonInput","type","formikFieldsProps","label","className","s","group","required","highlight","bar","CommonButton","red","restProps","btn","name","CommonCheckbox","onChange","onChangeChecked","spanClassName","children","cbContainer","optionInput","Login","dispatch","useDispatch","useSelector","state","login","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","then","value","catch","e","response","setErrorAC","console","log","to","style","commonContainer","title","formBlock","handleSubmit","getFieldProps","touched","registrationError","checkbox","SUCCESS_SUBMIT","FAILED_SUBMIT","LOADING","CLEAR_STATUS","INIT","SET_IS_PASSWORD_CHANGED","successSubmit","status","failedSubmit","initRestorePage","initialState","currentEmail","isPasswordChanged","NewPassword","useParams","restore","useEffect","passwordConfirm","token","setTimeout","PATH","LOGIN","isRegistered","Registration","registration","res","RestorePassword","submitRestorePassword","useCallback","Test","Error404","NEW_PASSWORD","PROFILE","REGISTRATION","RESTORE_PASSWORD","TEST","Routes","commonBlock","exact","path","render","Navbar","navbarBlock","activeClassName","active","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","auth","action","profile","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5578421.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbarBlock\":\"Navbar_navbarBlock__2wyuz\",\"active\":\"Navbar_active__3WZo-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"commonBlock\":\"Common_commonBlock__1onnh\",\"commonContainer\":\"Common_commonContainer__VPZFU\",\"title\":\"Common_title__3AOve\",\"formBlock\":\"Common_formBlock__1qqQX\",\"error\":\"Common_error__32O98\",\"registrationError\":\"Common_registrationError__o7Dr2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"CommonInput_group__2fckV\",\"bar\":\"CommonInput_bar__GpAhy\",\"highlight\":\"CommonInput_highlight__3y1Xi\",\"inputHighlighter\":\"CommonInput_inputHighlighter__2PJXc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cbContainer\":\"CommonCheckbox_cbContainer__1Rlmv\",\"optionInput\":\"CommonCheckbox_optionInput__K3vkX\",\"click-wave\":\"CommonCheckbox_click-wave__2k1RO\",\"radio\":\"CommonCheckbox_radio__13Kc_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"CommonButton_btn__1PMfW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Login_checkbox__3ocOq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"Test_test__1h1Vp\"};","import React from \"react\";\n\nexport const Profile = () => {\n    return (\n        <div>\n            Profile\n        </div>\n    )\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:7542/2.0/\",\r\n    withCredentials: true\r\n})\r\n\r\nconst instanceHeroku = axios.create(({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n}))\r\n\r\n// Request types\r\nexport type RegistrationParamsType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n//Response types\r\ntype ResponseRestoreType = {\r\n    info: string,\r\n    error?: string\r\n};\r\n\r\ntype ResponseLoginRegistrationType = {\r\n    email: string\r\n    created: string\r\n    isAdmin: boolean\r\n    name: string\r\n    publicCardPacksCount: number\r\n    rememberMe: boolean\r\n    updated: string\r\n    verified: boolean\r\n    _id: string\r\n}\r\ntype RegistrationType = {\r\n    __v: number\r\n}\r\n type LoginType = {\r\n    avatar?: string;\r\n    error?: string;\r\n}\r\n\r\ntype ResponseRegistrationType = ResponseLoginRegistrationType & RegistrationType\r\ntype LoginResponseType = ResponseLoginRegistrationType & LoginType\r\n\r\n\r\nexport const loginApi = {\r\n    login(data: LoginDataType) {\r\n        return instanceHeroku.post<LoginResponseType>('/auth/login', data)\r\n    }\r\n}\r\n\r\nexport const restoreAPI = {\r\n    restorePassword: async (email: string | null) => {\r\n        const promise = await instanceHeroku.post<ResponseRestoreType>('auth/forgot', {\r\n            email,\r\n            from: 'dreamonaut@mail.ru',\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n              password recovery link: \t\r\n              <a href='https://andreisavelyev1989.github.io/new_project/new_project/#/new-password/$token$'>\t\r\n              link</a></div>`,\r\n        });\r\n        return promise;\r\n    },\r\n    setNewPassword: async (password: string, resetPasswordToken: string) => {\r\n        const promise = await instanceHeroku.post<ResponseRestoreType>('auth/set-new-password', {\r\n            password: password,\r\n            resetPasswordToken: resetPasswordToken,\r\n        });\r\n        return promise;\r\n    },\r\n};\r\n\r\nexport const registrationAPI = {\r\n    setRegistration(data: RegistrationParamsType) {\r\n        return instanceHeroku.post<ResponseRegistrationType>(\"auth/register\", data)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {loginApi, LoginDataType} from \"../../m3-dal/api\";\r\n\r\n\r\ntype initialStateType = {\r\n    isLoggedIn: boolean\r\n    error: string | null\r\n}\r\nconst intialState: initialStateType = {\r\n    isLoggedIn: false,\r\n    error:null\r\n}\r\n//reducers\r\nexport const loginReducer = (state = intialState, action: ActionLoginType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\": {\r\n            return {...state, isLoggedIn: action.value}\r\n        }\r\n        case \"login/ERROR\": {\r\n            return {...state, error: action.error}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\nexport const setErrorAC = (error: string | null) => ({type:\"login/ERROR\", error} as const)\r\nexport const isLogedInAC = (value: boolean) => ({type: \"login/SET-IS-LOGGED-IN\", value} as const)\r\ntype ActionLoginType = ReturnType<typeof isLogedInAC> | ReturnType<typeof setErrorAC>\r\n\r\n\r\n//thunk\r\nexport const loginTC = (data: LoginDataType) => (dispatch: Dispatch) => {\r\n    loginApi.login(data)\r\n        .then(() => {\r\n                dispatch(isLogedInAC(true))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setErrorAC(error))\r\n            console.log('Error: ', {...e})\r\n            return console.log(error)\r\n        })\r\n}","import React, {DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./CommonInput.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    label?: string\r\n    formikFieldsProps?: any\r\n    error?: any\r\n};\r\n\r\nconst CommonInput: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        formikFieldsProps,\r\n        label,\r\n        error,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <>\r\n            <div className={s.group}>\r\n                <input\r\n                    type={type}\r\n                    {...formikFieldsProps}\r\n                    required\r\n                />\r\n                <span className={s.highlight}> </span>\r\n                <span className={s.bar}> </span>\r\n                <label>{label}</label>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CommonInput;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./CommonButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n    error?: string\r\n    name: string\r\n}\r\n\r\nconst CommonButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        error,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <button\r\n            className={s.btn}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        >{restProps.name}</button>\r\n    );\r\n}\r\n\r\nexport default CommonButton;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./CommonCheckbox.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n    formikFieldsProps?: any\r\n};\r\n\r\nconst CommonCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n        formikFieldsProps,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n\r\n\r\n    return (<div className={s.cbContainer}>\r\n        <label>\r\n            <input className={s.optionInput}\r\n                type={\"checkbox\"}\r\n                {...formikFieldsProps}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            /> Remember me\r\n        </label>\r\n        </div> // благодаря label нажатие на спан передастся в инпут\r\n    );\r\n}\r\n\r\nexport default CommonCheckbox;\r\n","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/state/store\";\r\nimport {loginTC} from \"../../../m2-bll/redusers/login-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport CommonInput from \"../../../common/c1-CommonInput/CommonInput\";\r\nimport CommonButton from \"../../../common/c2-CommonButton/CommonButton\";\r\nimport style from \"./../../../assets/style/Common.module.css\";\r\nimport CommonCheckbox from \"../../../common/c3-CommonCheckbox/CommonCheckbox\";\r\nimport s from \"./Login.module.css\"\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch() //разобраться с useDispatch\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.login.error)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Password must be 15 characters or less';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be more than 7 characters ';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n    return (\r\n        <div className={style.commonContainer}>\r\n            <h1 className={style.title}>Login Here</h1>\r\n            <div className={style.error}>{error ? error : null}</div>\r\n            <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n                <CommonInput\r\n                    type={\"text\"}\r\n                    label={\"Email\"}\r\n                    formikFieldsProps={{...formik.getFieldProps(\"email\")}}/>\r\n                {formik.touched.email && formik.errors.email ?\r\n                    <div className={style.registrationError}>{formik.errors.email}</div> : null}\r\n\r\n                <CommonInput\r\n                    type={\"password\"}\r\n                    label={\"Password\"}\r\n                    formikFieldsProps={{...formik.getFieldProps(\"password\")}}/>\r\n                {formik.touched.password && formik.errors.password ?\r\n                    <div className={style.registrationError}>{formik.errors.password}</div> : null}\r\n\r\n                <div className={s.checkbox}>\r\n                    <CommonCheckbox\r\n                        type={\"checkbox\"}\r\n                        formikFieldsProps={{...formik.getFieldProps(\"rememberMe\")}}/>\r\n\r\n                </div>\r\n\r\n                <CommonButton type={\"submit\"} name={\"Login\"}/>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}","import { Dispatch } from 'redux';\r\nimport { restoreAPI } from '../../m3-dal/api';\r\n\r\nconst SUCCESS_SUBMIT = 'restore/SUCCESS_SUBMIT';\r\nconst FAILED_SUBMIT = 'restore/FAILED_SUBMIT';\r\nconst LOADING = 'restore/LOADING';\r\nconst CLEAR_STATUS = 'restore/CLEAR_STATUS';\r\nconst INIT = 'restore/INIT';\r\nconst SET_IS_PASSWORD_CHANGED = 'restore/SET_IS_PASSWORD_CHANGED';\r\n\r\ntype SuccessSubmitType = {\r\n  type: typeof SUCCESS_SUBMIT;\r\n  status: string;\r\n};\r\n\r\ntype FailedSubmitType = {\r\n  type: typeof FAILED_SUBMIT;\r\n  error: string;\r\n  status: string;\r\n};\r\n\r\ntype ClearStatusType = {\r\n  type: typeof CLEAR_STATUS;\r\n};\r\n\r\ntype LoadingType = {\r\n  type: typeof LOADING;\r\n};\r\n\r\ntype InitType = {\r\n  type: typeof INIT;\r\n};\r\n\r\ntype SetIsPasswordChangedType = {\r\n  type: typeof SET_IS_PASSWORD_CHANGED;\r\n};\r\n\r\ntype ActionsType =\r\n  | SuccessSubmitType\r\n  | FailedSubmitType\r\n  | ClearStatusType\r\n  | LoadingType\r\n  | InitType\r\n  | SetIsPasswordChangedType;\r\n\r\nexport type RestoreStateType = {\r\n  currentEmail: null | string;\r\n  error: null | string;\r\n  status: null | string;\r\n  isPasswordChanged: boolean;\r\n};\r\n\r\nexport const successSubmit = (status: string): SuccessSubmitType => ({\r\n  type: SUCCESS_SUBMIT,\r\n  status,\r\n});\r\n\r\nexport const failedSubmit = (\r\n  error: string,\r\n  status: string\r\n): FailedSubmitType => ({\r\n  type: FAILED_SUBMIT,\r\n  error,\r\n  status,\r\n});\r\n\r\nexport const clearStatus = (): ClearStatusType => ({\r\n  type: CLEAR_STATUS,\r\n});\r\n\r\nexport const initRestorePage = (): InitType => ({\r\n  type: INIT,\r\n});\r\n\r\nexport const setIsPasswordChanged = (): SetIsPasswordChangedType => ({\r\n  type: SET_IS_PASSWORD_CHANGED,\r\n});\r\n\r\nconst initialState: RestoreStateType = {\r\n  currentEmail: null,\r\n  error: null,\r\n  status: null,\r\n  isPasswordChanged: false,\r\n};\r\n\r\nexport const restoreReducer = (\r\n  state: RestoreStateType = initialState,\r\n  action: ActionsType\r\n) => {\r\n  switch (action.type) {\r\n    case SUCCESS_SUBMIT: {\r\n      return { ...state, currentEmail: null, status: action.status };\r\n    }\r\n    case FAILED_SUBMIT: {\r\n      return {\r\n        ...state,\r\n        currentEmail: null,\r\n        error: action.error,\r\n        status: action.status,\r\n      };\r\n    }\r\n    case LOADING: {\r\n      return { ...state, status: 'loading' };\r\n    }\r\n    case CLEAR_STATUS: {\r\n      return { ...state, status: null };\r\n    }\r\n    case INIT: {\r\n      return { ...state, status: null, error: null };\r\n    }\r\n    case SET_IS_PASSWORD_CHANGED: {\r\n      return { ...state, isPasswordChanged: !state.isPasswordChanged };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const restorePassword = (email: string | null) => async (\r\n  dispatch: Dispatch\r\n) => {\r\n  try {\r\n    dispatch({ type: LOADING });\r\n    await restoreAPI.restorePassword(email);\r\n    dispatch(successSubmit('New password send to ur email'));\r\n  } catch (e) {\r\n    dispatch(failedSubmit(e.response.data.error, 'Email not found'));\r\n  }\r\n};\r\n\r\nexport const setNewPassword = (password: string, token: string) => async (\r\n  dispatch: Dispatch\r\n) => {\r\n  try {\r\n    dispatch({ type: LOADING });\r\n    await restoreAPI.setNewPassword(password, token);\r\n    dispatch(successSubmit('Password has been changed'));\r\n    setTimeout(() => dispatch(setIsPasswordChanged()), 3000);\r\n  } catch (e) {\r\n    dispatch(failedSubmit(e.response.data.error, 'Error'));\r\n  }\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  RestoreStateType,\r\n  setNewPassword,\r\n  initRestorePage,\r\n} from '../../../m2-bll/redusers/restore-reducer';\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { AppRootStateType } from '../../../m2-bll/state/store';\r\nimport { useFormik } from 'formik';\r\nimport CommonButton from '../../../common/c2-CommonButton/CommonButton';\r\nimport CommonInput from '../../../common/c1-CommonInput/CommonInput';\r\nimport style from './../../../assets/style/Common.module.css';\r\nimport { PATH } from '../../routes/Routes';\r\n\r\ntype FormikErrorType = {\r\n  passwordConfirm?: string;\r\n  password?: string;\r\n};\r\n\r\nexport const NewPassword = () => {\r\n  const dispatch = useDispatch();\r\n  const { resetPasswordToken } = useParams<Record<string, string>>();\r\n  const { error, status, isPasswordChanged } = useSelector<AppRootStateType, RestoreStateType>(\r\n    (state) => state.restore\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(initRestorePage());\r\n  }, []);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      passwordConfirm: '',\r\n    },\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {};\r\n\r\n      if (!values.password) {\r\n        errors.password = 'Required';\r\n      } else if (values.password.length > 15) {\r\n        errors.password = 'Password must be 15 characters or less';\r\n      } else if (values.password.length < 8) {\r\n        errors.password = 'Password must be more than 7 characters ';\r\n      }\r\n\r\n      if (!values.passwordConfirm) {\r\n        errors.passwordConfirm = 'Required';\r\n      } else if (values.password !== values.passwordConfirm) {\r\n        errors.passwordConfirm = 'Password and Confirm Password must be equal';\r\n      }\r\n      return errors;\r\n    },\r\n\r\n    onSubmit: (values) => {\r\n      if (values.password === values.passwordConfirm) {\r\n        dispatch(setNewPassword(values.password, resetPasswordToken));\r\n      }\r\n    },\r\n  });\r\n\r\n  if (isPasswordChanged) {\r\n    return <Redirect to={PATH.LOGIN} />\r\n  }\r\n  return (\r\n    <div className={style.commonContainer}>\r\n      <h1 className={style.title}>Set new password</h1>\r\n      <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n        <div className={style.error}>{status && status}</div>\r\n        <CommonInput\r\n          type={'password'}\r\n          label={'Password'}\r\n          error={error || formik.errors}\r\n          formikFieldsProps={{ ...formik.getFieldProps('password') }}\r\n        />\r\n\r\n        {formik.touched.password && formik.errors.password ? (\r\n          <div className={style.registrationError}>\r\n            {formik.errors.password}\r\n          </div>\r\n        ) : null}\r\n\r\n        <CommonInput\r\n          type={'password'}\r\n          label={'Confirm Password'}\r\n          formikFieldsProps={{ ...formik.getFieldProps('passwordConfirm') }}\r\n        />\r\n\r\n        {formik.touched.passwordConfirm && formik.errors.passwordConfirm ? (\r\n          <div className={style.registrationError}>\r\n            {formik.errors.passwordConfirm}\r\n          </div>\r\n        ) : null}\r\n\r\n        <CommonButton type={'submit'} name={'Send'} />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import {Dispatch} from \"redux\";\r\nimport {registrationAPI, RegistrationParamsType} from \"../../m3-dal/api\";\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n    error: null\r\n}\r\n\r\ntype InitialStateType = {\r\n    isRegistered: boolean\r\n    error: null | string\r\n}\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType) : InitialStateType => {\r\n    switch (action.type) {\r\n        case \"registration/SET-REGISTRATION\":\r\n            return {...state, isRegistered: action.value}\r\n        case \"registration/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nconst setIsRegisteredAC = (value: boolean) => ({type: \"registration/SET-REGISTRATION\", value} as const)\r\nconst setErrorAC = (error: string | null) => ({type: \"registration/SET-ERROR\", error} as const)\r\n//thunks\r\nexport const registrationTC = (data: RegistrationParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    registrationAPI.setRegistration(data)\r\n        .then(res => {\r\n            dispatch(setIsRegisteredAC(true))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            console.log('Error: ', {...e})\r\n            dispatch(setErrorAC(error))\r\n        })\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsRegisteredAC>\r\n    | ReturnType<typeof setErrorAC>","import React from \"react\";\r\nimport style from \"./../../../assets/style/Common.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {registrationTC} from \"../../../m2-bll/redusers/registration-reducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../routes/Routes\";\r\nimport {useFormik} from \"formik\";\r\nimport CommonButton from \"../../../common/c2-CommonButton/CommonButton\";\r\nimport CommonInput from \"../../../common/c1-CommonInput/CommonInput\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    passwordConfirm?: string\r\n}\r\n\r\nexport const Registration = () => {\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.registration.isRegistered)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.registration.error)\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            passwordConfirm: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Password must be 15 characters or less';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be more than 7 characters ';\r\n            }\r\n\r\n            if (!values.passwordConfirm) {\r\n                errors.passwordConfirm = 'Required';\r\n            } else if (values.password !== values.passwordConfirm) {\r\n                errors.passwordConfirm = 'Password and Confirm Password must be equal'\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            if (values.password === values.passwordConfirm) {\r\n                dispatch(registrationTC(values))\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.commonContainer}>\r\n            <h1 className={style.title}>Registration</h1>\r\n            <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n                <div className={style.error}>{error ? error : null}</div>\r\n\r\n                <CommonInput\r\n                    type={\"text\"}\r\n                    label={\"Email\"}\r\n                    error={error || (formik.errors && formik.touched)}\r\n                    formikFieldsProps={{...formik.getFieldProps(\"email\")}}/>\r\n\r\n                {formik.touched.email && formik.errors.email ?\r\n                    <div className={style.registrationError}>{formik.errors.email}</div> : null}\r\n\r\n                <CommonInput\r\n                    type={\"password\"}\r\n                    label={\"Password\"}\r\n                    formikFieldsProps={{...formik.getFieldProps(\"password\")}}/>\r\n\r\n                {formik.touched.password && formik.errors.password ?\r\n                    <div className={style.registrationError}>{formik.errors.password}</div> : null}\r\n\r\n                    <CommonInput\r\n                        type={\"password\"}\r\n                        label={\"Confirm Password\"}\r\n                        formikFieldsProps={{...formik.getFieldProps(\"passwordConfirm\")}}\r\n                    />\r\n\r\n                {formik.touched.passwordConfirm && formik.errors.passwordConfirm ?\r\n                    <div className={style.registrationError}>{formik.errors.passwordConfirm}</div> : null}\r\n\r\n                <CommonButton type={\"submit\"} name={\"Sign up\"}/>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, { useCallback, useEffect } from 'react';\r\nimport {\r\n  initRestorePage,\r\n  restorePassword,\r\n  RestoreStateType,\r\n} from '../../../m2-bll/redusers/restore-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../../m2-bll/state/store';\r\nimport { useFormik } from 'formik';\r\nimport CommonButton from '../../../common/c2-CommonButton/CommonButton';\r\nimport CommonInput from '../../../common/c1-CommonInput/CommonInput';\r\nimport style from './../../../assets/style/Common.module.css';\r\n\r\ntype FormikErrorType = {\r\n  email?: string;\r\n};\r\n\r\nexport const RestorePassword = () => {\r\n  const dispatch = useDispatch();\r\n  const { error, currentEmail, status } = useSelector<\r\n    AppRootStateType,\r\n    RestoreStateType\r\n  >((state) => state.restore);\r\n\r\n  const submitRestorePassword = useCallback(\r\n    (currentEmail) => {\r\n      dispatch(restorePassword(currentEmail));\r\n    },\r\n    [currentEmail]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(initRestorePage());\r\n  }, []);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n    },\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {};\r\n\r\n      if (!values.email) {\r\n        errors.email = 'Required';\r\n      } else if (\r\n        /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)/.test(\r\n          values.email\r\n        )\r\n      ) {\r\n        return undefined;\r\n      } else {\r\n        errors.email = 'Write correct email';\r\n      }\r\n\r\n      return errors;\r\n    },\r\n\r\n    onSubmit: (values) => {\r\n      submitRestorePassword(values.email);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className={style.commonContainer}>\r\n      <h1 className={style.title}>Restore</h1>\r\n      <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n        <div className={style.error}>{status && status}</div>\r\n        <CommonInput\r\n          type={'text'}\r\n          label={'email'}\r\n          error={error || formik.errors}\r\n          formikFieldsProps={{ ...formik.getFieldProps('email') }}\r\n        />\r\n\r\n        {formik.touched.email && formik.errors.email ? (\r\n          <div className={style.registrationError}>{formik.errors.email}</div>\r\n        ) : null}\r\n\r\n        <CommonButton type={'submit'} name={'Send request'} />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport CommonButton from \"../../../common/c2-CommonButton/CommonButton\";\r\nimport CommonInput from \"../../../common/c1-CommonInput/CommonInput\";\r\nimport CommonCheckbox from \"../../../common/c3-CommonCheckbox/CommonCheckbox\";\r\nimport style from \"./Test.module.css\"\r\n\r\nexport const Test = () => {\r\n    return (\r\n        <div className={style.test}>\r\n            <CommonButton name={'test'}/>\r\n            <CommonInput label={'Test'}/>\r\n            <CommonCheckbox/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\n\nexport const Error404 = () => {\n    return (\n        <div>\n            Error404\n        </div>\n    )\n}","import React from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Profile} from \"../pages/profile/Profile\";\r\nimport {Login} from \"../pages/login/Login\";\r\nimport {NewPassword} from \"../pages/new-password/NewPassword\";\r\nimport {Registration} from \"../pages/registration/Registration\";\r\nimport {RestorePassword} from \"../pages/restore-password/RestorePassword\";\r\nimport {Test} from \"../pages/test/Test\";\r\nimport {Error404} from \"../pages/error404/Error404\";\r\nimport style from \"../../assets/style/Common.module.css\"\r\n\r\nexport const PATH = {\r\n    LOGIN: \"/login\",\r\n    NEW_PASSWORD: \"/new-password\",\r\n    PROFILE: \"/profile\",\r\n    REGISTRATION: \"/registration\",\r\n    RESTORE_PASSWORD: \"/restore-password\",\r\n    TEST: \"/test\"\r\n}\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div className={style.commonBlock}>\r\n            <Switch>\r\n                <Route exact path={\"/\"} render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={`${PATH.NEW_PASSWORD}/:resetPasswordToken`} render={() => <NewPassword/>}/>\r\n                <Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\r\n                <Route path={PATH.RESTORE_PASSWORD} render={() => <RestorePassword/>}/>\r\n                <Route path={PATH.TEST} render={() => <Test/>}/>\r\n                <Route render={() => <Error404/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport {PATH} from \"../routes/Routes\";\nimport style from \"./Navbar.module.css\";\n\nexport const Navbar = () => {\n    return (\n        <div className={style.navbarBlock}>\n            <NavLink to={PATH.PROFILE} activeClassName={style.active}>Profile</NavLink>\n            <NavLink to={PATH.REGISTRATION} activeClassName={style.active}>Registration</NavLink>\n            <NavLink to={PATH.RESTORE_PASSWORD} activeClassName={style.active}>Restore password</NavLink>\n            <NavLink to={PATH.NEW_PASSWORD} activeClassName={style.active}>New password</NavLink>\n            <NavLink to={PATH.LOGIN} activeClassName={style.active}>Login</NavLink>\n            <NavLink to={PATH.TEST} activeClassName={style.active}>Test</NavLink>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport {Navbar} from \"./m1-ui/navbar/Navbar\";\nimport {Routes} from \"./m1-ui/routes/Routes\";\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n        <Navbar />\n        <Routes />\n    </div>\n  );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {authReducer} from \"../redusers/auth-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {profileReducer} from \"../redusers/profile-reducer\";\r\nimport {registrationReducer} from \"../redusers/registration-reducer\";\r\nimport {loginReducer} from \"../redusers/login-reducer\";\r\nimport { restoreReducer } from '../redusers/restore-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    profile: profileReducer,\r\n    registration: registrationReducer,\r\n    login: loginReducer,\r\n    restore: restoreReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","\nexport const authReducer = (state = {}, action: any) => {\n    switch (action.type) {\n        default:\n            return state\n    }\n}","\nexport const profileReducer = (state= {}, action: any) => {\n    switch (action.type) {\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./m2-bll/state/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <HashRouter>\n          <Provider store={store}>\n              <App />\n          </Provider>\n      </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}